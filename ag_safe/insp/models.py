from django.db import models

# Create your models here.


class User(models.Model):
    objects = None
    id = models.AutoField(primary_key=True)
    username = models.CharField(max_length=100, blank=True)
    name = models.CharField(max_length=100, blank=True)
    email = models.CharField(max_length=100, blank=True)
    password = models.CharField(max_length=100, blank=True)
    contact = models.CharField(max_length=100, blank=True)
    address = models.CharField(max_length=100, blank=True)
    image = models.CharField(max_length=100, blank=True)
    zipcode = models.CharField(max_length=100, blank=True)
    dob = models.CharField(max_length=100, blank=True)
    role_id = models.IntegerField()
    status = models.IntegerField()
    register_date = models.DateTimeField(auto_now_add=True)
    user_directory = models.CharField(max_length=100, blank=True)

    class Meta:
        db_table = "insp_user"

    def __str__(self):
        return self.username


class Inspections(models.Model):
    objects = None
    id = models.AutoField(primary_key=True)
    title = models.CharField(max_length=100)
    facility = models.CharField(max_length=100)
    stakeholders = models.CharField(max_length=100)
    type = models.CharField(max_length=100)
    location = models.CharField(max_length=100)
    category = models.CharField(max_length=100)
    operating_area = models.CharField(max_length=100)
    supervisor = models.CharField(max_length=100, blank=True)
    datetime = models.DateField(max_length=50, blank=True)
    draft_directory = models.CharField(max_length=100, blank=True)
    draft_name = models.CharField(max_length=100, blank=True)
    draft_slug = models.CharField(max_length=100, blank=True)
    status = models.IntegerField(null=True)
    approve = models.CharField(max_length=100, blank=True)
    user_id = models.IntegerField()

    class Meta:
        db_table = "insp_inspection"

    def __str__(self):
        return self.title


class Facility(models.Model):
    objects = None
    id = models.AutoField(primary_key=True)
    facility = models.CharField(max_length=100)

    class Meta:
        db_table = "insp_facility"

    def __str__(self):
        return self.facility


class Type(models.Model):
    objects = None
    id = models.AutoField(primary_key=True)
    type = models.CharField(max_length=100)
    type_slug = models.CharField(max_length=200, blank=True)
    draft_html = models.TextField()

    class Meta:
        db_table = "insp_type"

    def __str__(self):
        return self.type


class DraftTables(models.Model):
    objects = None
    id = models.AutoField(primary_key=True)
    draft_name = models.CharField(max_length=100)
    draft_func_name = models.CharField(max_length=100)

    class Meta:
        db_table = "insp_draft_tbl"

    def __str__(self):
        return self.draft_name

# DRAFTS DATABASE


class AccidentInvestigationRCAForm(models.Model):
    id = models.AutoField(primary_key=True)
    plants_name = models.TextField(blank=True, null=True)
    job_title = models.TextField(blank=True, null=True)
    address = models.TextField(blank=True, null=True)
    date_occurrence = models.CharField(max_length=20, blank=True, null=True)
    lcoation = models.TextField(blank=True, null=True)
    date_reported = models.CharField(max_length=20, blank=True, null=True)
    to_whom = models.TextField(blank=True, null=True)
    incident = models.TextField(blank=True, null=True)
    des_happened = models.TextField(blank=True, null=True)
    des_nature = models.TextField(blank=True, null=True)
    body_injured = models.TextField(blank=True, null=True)
    type_accident = models.TextField(blank=True, null=True)
    wit_name_one = models.TextField(blank=True, null=True)
    wit_ph_one = models.CharField(max_length=20, blank=True, null=True)
    wit_addr_one = models.TextField(blank=True, null=True)
    wit_ph_two = models.CharField(max_length=20, blank=True, null=True)
    wit_name_two = models.TextField(blank=True, null=True)
    wit_ph_three = models.CharField(max_length=20, blank=True, null=True)
    wit_addr_two = models.TextField(blank=True, null=True)
    wit_ph_four = models.CharField(max_length=20, blank=True, null=True)
    wit_name_three = models.TextField(blank=True, null=True)
    wit_ph_five = models.CharField(max_length=20, blank=True, null=True)
    wit_addr_three = models.TextField(blank=True, null=True)
    wit_ph_six = models.CharField(max_length=20, blank=True, null=True)
    phy_name = models.TextField(blank=True, null=True)
    phy_ph_one = models.CharField(max_length=20, blank=True, null=True)
    phy_addr = models.TextField(blank=True, null=True)
    phy_ph_two = models.CharField(max_length=20, blank=True, null=True)
    causes = models.TextField(blank=True, null=True)
    des_exist = models.TextField(blank=True, null=True)
    corr_actions = models.TextField(blank=True, null=True)
    des_action = models.TextField(blank=True, null=True)
    invest_name = models.TextField(blank=True, null=True)
    invest_sign = models.TextField(blank=True, null=True)
    invest_date = models.CharField(max_length=20, blank=True, null=True)
    review_name = models.TextField(blank=True, null=True)
    review_sign = models.TextField(blank=True, null=True)
    review_date = models.CharField(max_length=20, blank=True, null=True)
    review_first_name = models.TextField(blank=True, null=True)
    review_job_title = models.TextField(blank=True, null=True)
    review_addr = models.TextField(blank=True, null=True)
    review_date_occurrence = models.CharField(max_length=20, blank=True, null=True)
    review_location = models.TextField(blank=True, null=True)
    review_date_report = models.CharField(max_length=20, blank=True, null=True)
    review_to_whom = models.TextField(blank=True, null=True)
    illness = models.TextField(blank=True, null=True)
    des_injury = models.TextField(max_length=50, blank=True, null=True)
    des_materials = models.TextField(max_length=50, blank=True, null=True)
    body_injured_second = models.TextField(blank=True, null=True)
    type_incident = models.TextField(blank=True, null=True)
    wit_two_name_one = models.TextField(blank=True, null=True)
    wit_two_ph_one = models.CharField(max_length=20, blank=True, null=True)
    wit_two_addr_one = models.TextField(blank=True, null=True)
    wit_two_ph_two = models.TextField(blank=True, null=True)
    wit_two_name_two = models.TextField(blank=True, null=True)
    wit_two_ph_three = models.CharField(max_length=20, blank=True, null=True)
    wit_two_addr_two = models.TextField(blank=True, null=True)
    wit_two_ph_four = models.CharField(max_length=20, blank=True, null=True)
    wit_two_name_three = models.TextField(blank=True, null=True)
    wit_two_ph_five = models.CharField(max_length=20, blank=True, null=True)
    wit_two_addr_three = models.TextField(blank=True, null=True)
    wit_two_ph_six = models.CharField(max_length=20, blank=True, null=True)
    wit_two_emp_sign = models.TextField(blank=True, null=True)
    wit_two_date = models.CharField(max_length=20, blank=True, null=True)
    wit_two_supervisor = models.TextField(blank=True, null=True)
    wit_two_supervisor_sign = models.TextField(blank=True, null=True)
    wit_two_name_four = models.TextField(blank=True, null=True)
    wit_two_job_title = models.TextField(blank=True, null=True)
    wit_two_addr_four = models.TextField(blank=True, null=True)
    wit_two_date_occurance = models.TextField(blank=True, null=True)
    wit_two_location = models.TextField(blank=True, null=True)
    wit_two_wit_name = models.TextField(blank=True, null=True)
    wit_two_wit_job = models.TextField(blank=True, null=True)
    wit_two_wit_addr = models.TextField(blank=True, null=True)
    wit_two_loc_accident = models.TextField(blank=True, null=True)
    wit_two_date_occ = models.TextField(blank=True, null=True)
    wit_two_time_occ = models.TextField(blank=True, null=True)
    des_incident = models.TextField(blank=True, null=True)
    body_injured_third = models.TextField(blank=True, null=True)
    type_occupation = models.TextField(blank=True, null=True)
    wit_sign = models.TextField(max_length=50, blank=True, null=True)
    date = models.TextField(blank=True, null=True)
    supervisor_name = models.TextField(blank=True, null=True)
    supervisor_sign = models.TextField(blank=True, null=True)
    inspection = models.ForeignKey(to="Inspections", on_delete=models.CASCADE)

    class Meta:
        db_table = "insp_AccidentInvestigationRCAForm"

    def __str__(self):
        return self.plants_name


class AWPForm(models.Model):
    id = models.AutoField(primary_key=True)
    plants_name = models.CharField(max_length=50, blank=True, null=True)
    date = models.CharField(max_length=50, blank=True, null=True)
    device_id = models.CharField(max_length=50, blank=True, null=True)
    unit_type = models.CharField(max_length=50, blank=True, null=True)
    location = models.CharField(max_length=255, blank=True, null=True)
    brakes = models.CharField(max_length=5, blank=True, null=True)
    controls = models.CharField(max_length=5, blank=True, null=True)
    emergency = models.CharField(max_length=5, blank=True, null=True)
    lower = models.CharField(max_length=5, blank=True, null=True)
    both_controls = models.CharField(max_length=5, blank=True, null=True)
    defective = models.CharField(max_length=5, blank=True, null=True)
    hydraulic = models.CharField(max_length=5, blank=True, null=True)
    handrails = models.CharField(max_length=5, blank=True, null=True)
    basket = models.CharField(max_length=5, blank=True, null=True)
    exhaust = models.CharField(max_length=5, blank=True, null=True)
    outriggers = models.CharField(max_length=5, blank=True, null=True)
    tires = models.CharField(max_length=5, blank=True, null=True)
    landings = models.CharField(max_length=5, blank=True, null=True)
    coolant = models.CharField(max_length=5, blank=True, null=True)
    charged = models.CharField(max_length=5, blank=True, null=True)
    alarms = models.CharField(max_length=5, blank=True, null=True)
    Drive = models.CharField(max_length=5, blank=True, null=True)
    legible = models.CharField(max_length=5, blank=True, null=True)
    switches = models.CharField(max_length=5, blank=True, null=True)
    Operators = models.CharField(max_length=5, blank=True, null=True)
    first_name = models.CharField(max_length=5, blank=True, null=True)
    supervisor_name = models.CharField(max_length=50, blank=True, null=True)
    printed_name = models.CharField(max_length=50, blank=True, null=True)
    operat_name = models.CharField(max_length=50, blank=True, null=True)
    emp_by = models.CharField(max_length=50, blank=True, null=True)
    AWP = models.CharField(max_length=50, blank=True, null=True)
    comments = models.TextField(blank=True, null=True)
    representative_name = models.CharField(max_length=50, blank=True, null=True)
    emp_sign = models.CharField(max_length=50, blank=True, null=True)
    emp_date = models.CharField(max_length=50, blank=True, null=True)
    inspection = models.ForeignKey(to="Inspections", on_delete=models.CASCADE)

    class Meta:
        db_table = "insp_AWPForm"

    def __str__(self):
        return self.plants_name


class CompressedGasCylinder(models.Model):
    objects = None
    id = models.AutoField(primary_key=True)
    plants_name = models.CharField(max_length=50, blank=True)
    cylinder_colour = models.CharField(max_length=5, blank=True, null=True)
    cylinder_correct = models.CharField(max_length=5, blank=True, null=True)
    cylinder_hoses = models.CharField(max_length=5, blank=True, null=True)
    cylinder_upright = models.CharField(max_length=5, blank=True, null=True)
    cylinder_suitable = models.CharField(max_length=5, blank=True, null=True)
    cylinder_securing = models.CharField(max_length=5, blank=True, null=True)
    cylinder_lifting = models.CharField(max_length=5, blank=True, null=True)
    cylinder_appropriate = models.CharField(max_length=5, blank=True, null=True)
    cylinder_caps = models.CharField(max_length=5, blank=True, null=True)
    cylinder_trolley = models.CharField(max_length=5, blank=True, null=True)
    cylinder_restrictions = models.CharField(max_length=5, blank=True, null=True)
    cylinder_PPE = models.CharField(max_length=5, blank=True, null=True)
    cylinder_fire = models.CharField(max_length=5, blank=True, null=True)
    cylinder_emergency = models.CharField(max_length=5, blank=True, null=True)
    date = models.CharField(max_length=50, blank=True)
    cylinder_id = models.CharField(max_length=50, blank=True)
    isnp_name = models.CharField(max_length=50, blank=True)
    sign = models.CharField(max_length=50, blank=True)
    inspection = models.ForeignKey(to="Inspections", on_delete=models.CASCADE)
    # inspection = models.CharField(max_length=50, blank=True)

    class Meta:
        db_table = "insp_CompressedGasCylinder"

    def __str__(self):
        return self.inspection


class ConfinedSpaceAuthorization(models.Model):
    id = models.AutoField(primary_key=True)
    plants_name = models.CharField(max_length=50, blank=True, null=True)
    area = models.CharField(max_length=50, blank=True, null=True)
    date_issue = models.CharField(max_length=20, blank=True, null=True)
    start_time = models.CharField(max_length=50, blank=True, null=True)
    expiry_time = models.CharField(max_length=50, blank=True, null=True)
    mastercard = models.CharField(max_length=50, blank=True, null=True)
    equipment_id = models.CharField(max_length=50, blank=True, null=True)
    equipment_name = models.CharField(max_length=50, blank=True, null=True)
    des_hazardous = models.TextField(blank=True, null=True)
    equip_hazrdous = models.TextField(blank=True, null=True)
    remove_hazrdous = models.TextField(blank=True, null=True)
    LEL = models.CharField(max_length=50, blank=True, null=True)
    oxygen = models.CharField(max_length=50, blank=True, null=True)
    H2S = models.CharField(max_length=50, blank=True, null=True)
    CO = models.CharField(max_length=50, blank=True, null=True)
    time_test_one = models.CharField(max_length=50, blank=True, null=True)
    person_conducting_test = models.CharField(max_length=50, blank=True, null=True)
    print_one = models.CharField(max_length=50, blank=True, null=True)
    sign_one = models.CharField(max_length=50, blank=True, null=True)
    hazardous_reading = models.TextField(blank=True, null=True)
    time_test_two = models.CharField(max_length=50, blank=True, null=True)
    print_two = models.TextField(blank=True, null=True)
    print_three = models.TextField(blank=True, null=True)
    atmos = models.CharField(max_length=50, blank=True, null=True)
    atmos_other = models.CharField(max_length=50, blank=True, null=True)
    detail_freq = models.CharField(max_length=50, blank=True, null=True)
    protection = models.CharField(max_length=50, blank=True, null=True)
    protection_detail = models.TextField(blank=True, null=True)
    harness = models.CharField(max_length=5, blank=True, null=True)
    harness_detail = models.TextField(blank=True, null=True)
    goggles = models.CharField(max_length=5, blank=True, null=True)
    goggles_detail = models.TextField(blank=True, null=True)
    clothing = models.CharField(max_length=5, blank=True, null=True)
    clothing_detail = models.TextField(blank=True, null=True)
    other = models.CharField(max_length=5, blank=True, null=True)
    other_detail = models.TextField(blank=True, null=True)
    purifying = models.CharField(max_length=5, blank=True, null=True)
    purifying_detail = models.TextField(blank=True, null=True)
    breathing = models.CharField(max_length=5, blank=True, null=True)
    breathing_detail = models.TextField(blank=True, null=True)
    developed = models.CharField(max_length=5, blank=True, null=True)
    developed_detail = models.TextField(blank=True, null=True)
    intrinsically = models.CharField(max_length=5, blank=True, null=True)
    intrinsically_detail = models.TextField(blank=True, null=True)
    lighting = models.CharField(max_length=5, blank=True, null=True)
    lighting_detail = models.TextField(blank=True, null=True)
    place = models.CharField(max_length=5, blank=True, null=True)
    place_detail = models.TextField(blank=True, null=True)
    isolation = models.CharField(max_length=5, blank=True, null=True)
    isolation_detail = models.TextField(blank=True, null=True)
    blinding = models.CharField(max_length=5, blank=True, null=True)
    blinding_detail = models.TextField(blank=True, null=True)
    agitators = models.CharField(max_length=5, blank=True, null=True)
    agitators_detail = models.TextField(blank=True, null=True)
    portable = models.CharField(max_length=5, blank=True, null=True)
    portable_detail = models.TextField(blank=True, null=True)
    temperature = models.CharField(max_length=5, blank=True, null=True)
    temperature_detail = models.TextField(blank=True, null=True)
    entry = models.CharField(max_length=5, blank=True, null=True)
    entry_detail = models.TextField(blank=True, null=True)
    personnel = models.CharField(max_length=5, blank=True, null=True)
    personnel_detail = models.CharField(max_length=50, blank=True, null=True)
    communication = models.CharField(max_length=50, blank=True, null=True)
    des_instruction = models.TextField(blank=True, null=True)
    CSE_issuer_name = models.TextField(blank=True, null=True)
    CSE_issuer_sign = models.TextField(blank=True, null=True)
    CSW_name = models.TextField(blank=True, null=True)
    CSW_sign = models.TextField(blank=True, null=True)
    CSE_receiver_name = models.TextField(blank=True, null=True)
    CSE_receiver_sign = models.TextField(blank=True, null=True)
    main_auth_name = models.TextField(blank=True, null=True)
    main_auth_sign = models.TextField(blank=True, null=True)
    ABSP_auth_name = models.TextField(blank=True, null=True)
    ABSP_auth_sign = models.TextField(blank=True, null=True)
    inspection = models.ForeignKey(to="Inspections", on_delete=models.CASCADE)

    class Meta:
        db_table = "insp_ConfinedSpaceAuthorization"

    def __str__(self):
        return self.plants_name


class ConfinedSpaceEntry(models.Model):
    id = models.AutoField(primary_key=True)
    plants_name = models.TextField(blank=True, null=True)
    entry_location_one = models.TextField(blank=True, null=True)
    confined_name_one = models.TextField(blank=True, null=True)
    initials_one = models.TextField(blank=True, null=True)
    time_in_one = models.TextField(blank=True, null=True)
    time_out_one = models.TextField(blank=True, null=True)
    entry_location_two = models.TextField(blank=True, null=True)
    confined_name_two = models.TextField(blank=True, null=True)
    initials_two = models.TextField(blank=True, null=True)
    time_in_two = models.TextField(blank=True, null=True)
    time_out_two = models.TextField(blank=True, null=True)
    entry_location_three = models.TextField(blank=True, null=True)
    confined_name_three = models.TextField(blank=True, null=True)
    initials_three = models.TextField(blank=True, null=True)
    time_in_three = models.TextField(blank=True, null=True)
    time_out_three = models.TextField(blank=True, null=True)
    entry_location_four = models.TextField(blank=True, null=True)
    confined_name_four = models.TextField(blank=True, null=True)
    initials_four = models.TextField(blank=True, null=True)
    time_in_four = models.TextField(blank=True, null=True)
    time_out_four = models.TextField(blank=True, null=True)
    entry_location_five = models.TextField(blank=True, null=True)
    confined_name_five = models.TextField(blank=True, null=True)
    initials_five = models.TextField(blank=True, null=True)
    time_in_five = models.TextField(blank=True, null=True)
    time_out_five = models.TextField(blank=True, null=True)
    entry_location_six = models.TextField(blank=True, null=True)
    confined_name_six = models.TextField(blank=True, null=True)
    initials_six = models.TextField(blank=True, null=True)
    time_in_six = models.TextField(blank=True, null=True)
    time_out_six = models.TextField(blank=True, null=True)
    entry_location_seven = models.TextField(blank=True, null=True)
    confined_name_seven = models.TextField(blank=True, null=True)
    initials_seven = models.TextField(blank=True, null=True)
    time_in_seven = models.TextField(blank=True, null=True)
    time_out_seven = models.TextField(blank=True, null=True)
    entry_location_eight = models.TextField(blank=True, null=True)
    confined_name_eight = models.TextField(blank=True, null=True)
    initials_eight = models.TextField(blank=True, null=True)
    time_in_eight = models.TextField(blank=True, null=True)
    time_out_eight = models.TextField(blank=True, null=True)
    entry_location_nine = models.TextField(blank=True, null=True)
    confined_name_nine = models.TextField(blank=True, null=True)
    initials_nine = models.TextField(blank=True, null=True)
    time_in_nine = models.TextField(blank=True, null=True)
    time_out_nine = models.TextField(blank=True, null=True)
    entry_location_ten = models.TextField(blank=True, null=True)
    confined_name_ten = models.TextField(blank=True, null=True)
    initials_ten = models.TextField(blank=True, null=True)
    time_in_ten = models.TextField(blank=True, null=True)
    time_out_ten = models.TextField(blank=True, null=True)
    entry_location_eleven = models.TextField(blank=True, null=True)
    confined_name_eleven = models.TextField(blank=True, null=True)
    initials_eleven = models.TextField(blank=True, null=True)
    time_in_eleven = models.TextField(blank=True, null=True)
    time_out_eleven = models.TextField(blank=True, null=True)
    des_comment = models.TextField(blank=True, null=True)
    inspection = models.ForeignKey(to="Inspections", on_delete=models.CASCADE)

    class Meta:
        db_table = "insp_ConfinedSpaceEntry"

    def __str__(self):
        return self.plants_name


class DailyExcavation(models.Model):
    id = models.AutoField(primary_key=True)
    plants_name = models.CharField(max_length=50, blank=True, null=True)
    date = models.CharField(max_length=50, blank=True, null=True)
    area = models.CharField(max_length=50, blank=True, null=True)
    location = models.CharField(max_length=50, blank=True, null=True)
    weather = models.CharField(max_length=50, blank=True, null=True)
    rainfall = models.CharField(max_length=50, blank=True, null=True)
    authorized = models.CharField(max_length=50, blank=True, null=True)
    additional_info = models.CharField(max_length=50, blank=True, null=True)
    spoil = models.CharField(max_length=5, blank=True, null=True)
    tension = models.CharField(max_length=5, blank=True, null=True)
    trench = models.CharField(max_length=5, blank=True, null=True)
    seepage = models.CharField(max_length=5, blank=True, null=True)
    bracing = models.CharField(max_length=5, blank=True, null=True)
    caving = models.CharField(max_length=5, blank=True, null=True)
    zones = models.CharField(max_length=5, blank=True, null=True)
    egress = models.CharField(max_length=5, blank=True, null=True)
    certified = models.CharField(max_length=5, blank=True, null=True)
    shoring = models.CharField(max_length=5, blank=True, null=True)
    correct = models.CharField(max_length=5, blank=True, null=True)
    hydraulic = models.CharField(max_length=5, blank=True, null=True)
    adequate = models.CharField(max_length=5, blank=True, null=True)
    barricades = models.CharField(max_length=5, blank=True, null=True)
    boulders = models.CharField(max_length=5, blank=True, null=True)
    vibrations = models.CharField(max_length=5, blank=True, null=True)
    safety = models.CharField(max_length=5, blank=True, null=True)
    space = models.CharField(max_length=5, blank=True, null=True)
    supervisor_name = models.CharField(max_length=50, blank=True, null=True)
    sign = models.CharField(max_length=50, blank=True, null=True)
    inspection = models.ForeignKey(to="Inspections", on_delete=models.CASCADE)

    class Meta:
        db_table = "insp_DailyExcavation"

    def __str__(self):
        return self.plants_name


class DailyMaintenance(models.Model):
    id = models.AutoField(primary_key=True)
    plants_name = models.TextField(blank=True, null=True)
    engine_condition = models.TextField(blank=True, null=True)
    engine_notes = models.TextField(blank=True, null=True)
    battery_condition = models.TextField(blank=True, null=True)
    battery_notes = models.TextField(blank=True, null=True)
    belts_condition = models.TextField(blank=True, null=True)
    belts_notes = models.TextField(blank=True, null=True)
    bolts_condition = models.TextField(blank=True, null=True)
    bolts_notes = models.TextField(blank=True, null=True)
    coolant_condition = models.TextField(blank=True, null=True)
    coolant_notes = models.TextField(blank=True, null=True)
    cleaner_condition = models.TextField(blank=True, null=True)
    cleaner_notes = models.TextField(blank=True, null=True)
    drain_condition = models.TextField(blank=True, null=True)
    drain_notes = models.TextField(blank=True, null=True)
    evidence_condition = models.TextField(blank=True, null=True)
    evidence_notes = models.TextField(blank=True, null=True)
    walkways_condition = models.TextField(blank=True, null=True)
    walkways_notes = models.TextField(blank=True, null=True)
    oil_pressure_condition = models.TextField(blank=True, null=True)
    oil_pressure_notes = models.TextField(blank=True, null=True)
    oil_level_condition = models.TextField(blank=True, null=True)
    oil_level_notes = models.TextField(blank=True, null=True)
    temp_condition = models.TextField(blank=True, null=True)
    temp_notes = models.TextField(blank=True, null=True)
    air_cleaner_condition = models.TextField(blank=True, null=True)
    air_cleaner_notes = models.TextField(blank=True, null=True)
    hydraulic_condition = models.TextField(blank=True, null=True)
    hydraulic_notes = models.TextField(blank=True, null=True)
    hoses_condition = models.TextField(blank=True, null=True)
    hoses_notes = models.TextField(blank=True, null=True)
    reservoir_condition = models.TextField(blank=True, null=True)
    reservoir_notes = models.TextField(blank=True, null=True)
    seals_condition = models.TextField(blank=True, null=True)
    seals_notes = models.TextField(blank=True, null=True)
    filter_condition = models.TextField(blank=True, null=True)
    filter_notes = models.TextField(blank=True, null=True)
    cuts_condition = models.TextField(blank=True, null=True)
    cuts_notes = models.TextField(blank=True, null=True)
    light_condition = models.TextField(blank=True, null=True)
    light_notes = models.TextField(blank=True, null=True)
    tracks_condition = models.TextField(blank=True, null=True)
    tracks_notes = models.TextField(blank=True, null=True)
    fasteners_condition = models.TextField(blank=True, null=True)
    fasteners_notes = models.TextField(blank=True, null=True)
    pins_condition = models.TextField(blank=True, null=True)
    pins_notes = models.TextField(blank=True, null=True)
    guards_condition = models.TextField(blank=True, null=True)
    guards_notes = models.TextField(blank=True, null=True)
    braking_condition = models.TextField(blank=True, null=True)
    braking_notes = models.TextField(blank=True, null=True)
    emergency_condition = models.TextField(blank=True, null=True)
    emergency_notes = models.TextField(blank=True, null=True)
    steering_condition = models.TextField(blank=True, null=True)
    steering_notes = models.TextField(blank=True, null=True)
    crawler_condition = models.TextField(blank=True, null=True)
    crawler_notes = models.TextField(blank=True, null=True)
    inspection = models.ForeignKey(to="Inspections", on_delete=models.CASCADE)

    class Meta:
        db_table = "insp_DailyMaintenance"

    def __str__(self):
        return self.plants_name


class EarthmovingEquipment(models.Model):
    id = models.AutoField(primary_key=True)
    plants_name = models.CharField(max_length=50, blank=True, null=True)
    equipment_name = models.CharField(max_length=50, blank=True, null=True)
    equipment = models.CharField(max_length=50, blank=True, null=True)
    other_specify = models.CharField(max_length=50, blank=True, null=True)
    equipment_id = models.CharField(max_length=50, blank=True, null=True)
    access_good = models.CharField(max_length=50, blank=True, null=True)
    access_rejected = models.CharField(max_length=50, blank=True, null=True)
    access_na = models.CharField(max_length=50, blank=True, null=True)
    access_remarks = models.CharField(max_length=50, blank=True, null=True)
    backup_good = models.CharField(max_length=50, blank=True, null=True)
    engine_condition = models.CharField(max_length=50, blank=True, null=True)
    inspection = models.ForeignKey(to="Inspections", on_delete=models.CASCADE)

    class Meta:
        db_table = "insp_EarthmovingEquipment"

    def __str__(self):
        return self.plants_name


class EmergencyEvacuation(models.Model):
    id = models.AutoField(primary_key=True)
    plants_name = models.CharField(max_length=50, blank=True, null=True)
    equipment_name = models.CharField(max_length=50, blank=True, null=True)
    date = models.CharField(max_length=50, blank=True, null=True)
    time_drill = models.CharField(max_length=50, blank=True, null=True)
    location_drill = models.TextField(blank=True, null=True)
    des_drill = models.TextField(blank=True, null=True)
    des_deficiencies = models.TextField(blank=True, null=True)
    work_one = models.CharField(max_length=50, blank=True, null=True)
    work_two = models.CharField(max_length=50, blank=True, null=True)
    work_three = models.CharField(max_length=50, blank=True, null=True)
    work_four = models.CharField(max_length=50, blank=True, null=True)
    work_five = models.CharField(max_length=50, blank=True, null=True)
    work_six = models.CharField(max_length=50, blank=True, null=True)
    work_seven = models.CharField(max_length=50, blank=True, null=True)
    work_eight = models.CharField(max_length=50, blank=True, null=True)
    work_nine = models.CharField(max_length=50, blank=True, null=True)
    work_ten = models.CharField(max_length=50, blank=True, null=True)
    work_eleven = models.CharField(max_length=50, blank=True, null=True)
    work_twelve = models.CharField(max_length=50, blank=True, null=True)
    work_thirteen = models.CharField(max_length=50, blank=True, null=True)
    work_fourteen = models.CharField(max_length=50, blank=True, null=True)
    work_fifteen = models.CharField(max_length=50, blank=True, null=True)
    date_last_drill = models.CharField(max_length=50, blank=True, null=True)
    noted_deficiencies = models.TextField(blank=True, null=True)
    inspection = models.ForeignKey(to="Inspections", on_delete=models.CASCADE)

    class Meta:
        db_table = "insp_EmergencyEvacuation"

    def __str__(self):
        return self.plants_name


class EmergencyRescue(models.Model):
    id = models.AutoField(primary_key=True)
    plants_name = models.TextField(blank=True, null=True)
    permit = models.TextField(blank=True, null=True)
    area = models.TextField(blank=True, null=True)
    equipment = models.TextField(blank=True, null=True)
    date_develop = models.TextField(blank=True, null=True)
    developed_by = models.TextField(blank=True, null=True)
    des_location = models.TextField(blank=True, null=True)
    des_identify = models.TextField(blank=True, null=True)
    des_access = models.TextField(blank=True, null=True)
    access_info = models.TextField(blank=True, null=True)
    des_work = models.TextField(blank=True, null=True)
    des_hazards = models.TextField(blank=True, null=True)
    equipment_PPE = models.CharField(max_length=5, blank=True, null=True)
    equipment_horizontal = models.CharField(max_length=5, blank=True, null=True)
    equipment_self = models.CharField(max_length=5, blank=True, null=True)
    equipment_vertical = models.CharField(max_length=5, blank=True, null=True)
    equipment_supplied = models.CharField(max_length=5, blank=True, null=True)
    equipment_tripod = models.CharField(max_length=5, blank=True, null=True)
    equipment_ropes = models.CharField(max_length=5, blank=True, null=True)
    equipment_stokes = models.CharField(max_length=5, blank=True, null=True)
    equipment_protection = models.CharField(max_length=5, blank=True, null=True)
    equipment_monitor = models.CharField(max_length=5, blank=True, null=True)
    equipment_space = models.CharField(max_length=5, blank=True, null=True)
    other_equipment = models.TextField(blank=True, null=True)
    des_PPE = models.TextField(blank=True, null=True)
    des_emergency = models.TextField(blank=True, null=True)
    site_emergency = models.TextField(blank=True, null=True)
    auxiliary = models.TextField(blank=True, null=True)
    emergency = models.TextField(blank=True, null=True)
    contractor = models.TextField(blank=True, null=True)
    aid_support = models.TextField(blank=True, null=True)
    other_resources = models.TextField(blank=True, null=True)
    des_rescue = models.TextField(blank=True, null=True)
    supervisor_name = models.TextField(blank=True, null=True)
    supervisor_sign = models.TextField(blank=True, null=True)
    supervisor_date = models.TextField(blank=True, null=True)
    emer_representative_name = models.TextField(blank=True, null=True)
    emer_representative_sign = models.TextField(blank=True, null=True)
    emer_representative_date = models.TextField(blank=True, null=True)
    CSS_watch_name = models.TextField(blank=True, null=True)
    CSS_watch_sign = models.TextField(blank=True, null=True)
    CSS_watch_date = models.TextField(blank=True, null=True)
    HSE_representative_name = models.TextField(blank=True, null=True)
    HSE_representative_sign = models.TextField(blank=True, null=True)
    HSE_representative_date = models.TextField(blank=True, null=True)
    inspection = models.ForeignKey(to="Inspections", on_delete=models.CASCADE)

    class Meta:
        db_table = "insp_EmergencyRescue"

    def __str__(self):
        return self.plants_name


class EnergizedElectrical(models.Model):
    id = models.AutoField(primary_key=True)
    plants_name = models.TextField(blank=True, null=True)
    permit = models.TextField(blank=True, null=True)
    work_permit = models.TextField(blank=True, null=True)
    parmit_valid = models.TextField(blank=True, null=True)
    parmit_valid_two = models.TextField(blank=True, null=True)
    location = models.TextField(blank=True, null=True)
    cons_permit = models.TextField(blank=True, null=True)
    des_work = models.TextField(blank=True, null=True)
    des_energized = models.TextField(blank=True, null=True)
    req_name = models.TextField(blank=True, null=True)
    req_date = models.TextField(blank=True, null=True)
    check_list_scaffolding = models.CharField(max_length=5, blank=True, null=True)
    hazards_ana_one = models.TextField(blank=True, null=True)
    hazards_ana_two = models.TextField(blank=True, null=True)
    hazards_ana_three = models.TextField(blank=True, null=True)
    hazards_ana_four = models.TextField(blank=True, null=True)
    goggles = models.CharField(max_length=5, blank=True, null=True)
    Hardhat = models.CharField(max_length=5, blank=True, null=True)
    sleeve = models.CharField(max_length=5, blank=True, null=True)
    Insulated = models.CharField(max_length=5, blank=True, null=True)
    protection = models.CharField(max_length=5, blank=True, null=True)
    required = models.TextField(blank=True, null=True)
    other_one = models.TextField(blank=True, null=True)
    other_two = models.TextField(blank=True, null=True)
    other_three = models.TextField(blank=True, null=True)
    shock_haz = models.TextField(blank=True, null=True)
    flash_haz = models.TextField(blank=True, null=True)
    work_dis = models.TextField(blank=True, null=True)
    inci_energy = models.TextField(blank=True, null=True)
    arc_flash = models.TextField(blank=True, null=True)
    hazards_risk = models.TextField(blank=True, null=True)
    shock_hazard = models.TextField(blank=True, null=True)
    limited_boundry = models.TextField(blank=True, null=True)
    rest_boundry = models.TextField(blank=True, null=True)
    proh_boundry = models.TextField(blank=True, null=True)
    identify_area = models.TextField(blank=True, null=True)
    pre_job = models.CharField(max_length=5, blank=True, null=True)
    name_one = models.TextField(blank=True, null=True)
    sign_one = models.TextField(blank=True, null=True)
    position_one = models.TextField(blank=True, null=True)
    date_one = models.TextField(blank=True, null=True)
    name_two = models.TextField(blank=True, null=True)
    sign_two = models.TextField(blank=True, null=True)
    position_two = models.TextField(blank=True, null=True)
    date_two = models.TextField(blank=True, null=True)
    name_three = models.TextField(blank=True, null=True)
    sign_three = models.TextField(blank=True, null=True)
    position_three = models.TextField(blank=True, null=True)
    date_three = models.TextField(blank=True, null=True)
    name_four = models.TextField(blank=True, null=True)
    sign_four = models.TextField(blank=True, null=True)
    position_four = models.TextField(blank=True, null=True)
    date_four = models.TextField(blank=True, null=True)
    per_rec_name = models.TextField(blank=True, null=True)
    per_rec_sign = models.TextField(blank=True, null=True)
    per_rec_date = models.TextField(blank=True, null=True)
    per_issu_name = models.TextField(blank=True, null=True)
    per_issu_sign = models.TextField(blank=True, null=True)
    per_issu_date = models.TextField(blank=True, null=True)
    absp_lead_name = models.TextField(blank=True, null=True)
    absp_lead_sign = models.TextField(blank=True, null=True)
    absp_lead_date = models.TextField(blank=True, null=True)
    hse_rep_name = models.TextField(blank=True, null=True)
    hse_rep_sign = models.TextField(blank=True, null=True)
    hse_rep_date = models.TextField(blank=True, null=True)
    first_elect_name = models.TextField(blank=True, null=True)
    first_elect_sign = models.TextField(blank=True, null=True)
    first_elect_date = models.TextField(blank=True, null=True)
    second_elect_name = models.TextField(blank=True, null=True)
    second_elect_sign = models.TextField(blank=True, null=True)
    second_elect_date = models.TextField(blank=True, null=True)
    inspection = models.ForeignKey(to="Inspections", on_delete=models.CASCADE)

    class Meta:
        db_table = "insp_EnergizedElectrical"

    def __str__(self):
        return self.plants_name


class EquipmentDeficiency(models.Model):
    id = models.AutoField(primary_key=True)
    plants_name = models.CharField(max_length=50, blank=True, null=True)
    unit = models.CharField(max_length=50, blank=True, null=True)
    date = models.CharField(max_length=50, blank=True, null=True)
    des_tool = models.CharField(max_length=50, blank=True, null=True)
    des_deficiency = models.TextField(blank=True, null=True)
    required = models.CharField(max_length=5, blank=True, null=True)
    completed = models.CharField(max_length=5, blank=True, null=True)
    des_follow = models.TextField(blank=True, null=True)
    print = models.CharField(max_length=50, blank=True, null=True)
    sign = models.CharField(max_length=50, blank=True, null=True)
    inspection = models.ForeignKey(to="Inspections", on_delete=models.CASCADE)

    class Meta:
        db_table = "insp_EquipmentDeficiency"

    def __str__(self):
        return self.plants_name


class EquipmentInspection(models.Model):
    id = models.AutoField(primary_key=True)
    plants_name = models.TextField(blank=True, null=True)
    date = models.TextField(blank=True, null=True)
    vehicle = models.TextField(blank=True, null=True)
    odometer = models.TextField(blank=True, null=True)
    extcle_satis = models.TextField(blank=True, null=True)
    extcle_need_impro = models.TextField(blank=True, null=True)
    extcle_comment = models.TextField(blank=True, null=True)
    intcle_satis = models.TextField(blank=True, null=True)
    intcle_need_impro = models.TextField(blank=True, null=True)
    intcle_comment = models.TextField(blank=True, null=True)
    tracks_satis = models.TextField(blank=True, null=True)
    tracks_need_impro = models.TextField(blank=True, null=True)
    tracks_comment = models.TextField(blank=True, null=True)
    winds_satis = models.TextField(blank=True, null=True)
    winds_need_impro = models.TextField(blank=True, null=True)
    winds_comment = models.TextField(blank=True, null=True)
    wind_wiper_satis = models.TextField(blank=True, null=True)
    wind_wiper_need_impro = models.TextField(blank=True, null=True)
    wind_wiper_comment = models.TextField(blank=True, null=True)
    all_light_satis = models.TextField(blank=True, null=True)
    all_light_need_impro = models.TextField(blank=True, null=True)
    all_light_comment = models.TextField(blank=True, null=True)
    horn_satis = models.TextField(blank=True, null=True)
    horn_need_impro = models.TextField(blank=True, null=True)
    horn_comment = models.TextField(blank=True, null=True)
    fuel_satis = models.TextField(blank=True, null=True)
    fuel_need_impro = models.TextField(blank=True, null=True)
    fuel_comment = models.TextField(blank=True, null=True)
    oil_satis = models.TextField(blank=True, null=True)
    oil_need_impro = models.TextField(blank=True, null=True)
    oil_comment = models.TextField(blank=True, null=True)
    doc_satis = models.TextField(blank=True, null=True)
    doc_need_impro = models.TextField(blank=True, null=True)
    doc_comment = models.TextField(blank=True, null=True)
    des_comment = models.TextField(blank=True, null=True)
    insp_by = models.TextField(blank=True, null=True)
    sign = models.TextField(blank=True, null=True)
    inspection = models.ForeignKey(to="Inspections", on_delete=models.CASCADE)

    class Meta:
        db_table = "insp_EquipmentInspection"

    def __str__(self):
        return self.plants_name


class EquipmentOperator(models.Model):
    id = models.AutoField(primary_key=True)
    plants_name = models.CharField(max_length=50, blank=True)
    check_off = models.CharField(max_length=50, blank=True)
    equipments = models.CharField(max_length=100, blank=True)
    other_equip = models.CharField(max_length=50, blank=True)
    ope_name = models.CharField(max_length=50, blank=True)
    emp_name = models.CharField(max_length=50, blank=True)
    date_traning = models.CharField(max_length=50, blank=True)
    course_name = models.CharField(max_length=50, blank=True)
    equip_model = models.CharField(max_length=50, blank=True)
    emp_repres = models.CharField(max_length=50, blank=True)
    emp_date = models.CharField(max_length=50, blank=True)
    oper_sign = models.CharField(max_length=50, blank=True)
    oper_date = models.CharField(max_length=50, blank=True)
    inspection = models.ForeignKey(to="Inspections", on_delete=models.CASCADE)

    class Meta:
        db_table = "insp_EquipmentOperator"

    def __str__(self):
        return self.plants_name


class EyewashStation(models.Model):
    id = models.AutoField(primary_key=True)
    plants_name = models.TextField(blank=True, null=True)
    jan_def = models.TextField(blank=True, null=True)
    jan_insp_by = models.TextField(blank=True, null=True)
    jan_sign = models.TextField(blank=True, null=True)
    feb_def = models.TextField(blank=True, null=True)
    feb_insp_by = models.TextField(blank=True, null=True)
    feb_sign = models.TextField(blank=True, null=True)
    mar_def = models.TextField(blank=True, null=True)
    mar_insp_by = models.TextField(blank=True, null=True)
    mar_sign = models.TextField(blank=True, null=True)
    apr_def = models.TextField(blank=True, null=True)
    apr_insp_by = models.TextField(blank=True, null=True)
    apr_sign = models.TextField(blank=True, null=True)
    may_def = models.TextField(blank=True, null=True)
    may_insp_by = models.TextField(blank=True, null=True)
    may_sign = models.TextField(blank=True, null=True)
    jun_def = models.TextField(blank=True, null=True)
    jun_insp_by = models.TextField(blank=True, null=True)
    jun_sign = models.TextField(blank=True, null=True)
    jul_def = models.TextField(blank=True, null=True)
    jul_insp_by = models.TextField(blank=True, null=True)
    jul_sign = models.TextField(blank=True, null=True)
    aug_def = models.TextField(blank=True, null=True)
    aug_insp_by = models.TextField(blank=True, null=True)
    aug_sign = models.TextField(blank=True, null=True)
    sep_def = models.TextField(blank=True, null=True)
    sep_insp_by = models.TextField(blank=True, null=True)
    sep_sign = models.TextField(blank=True, null=True)
    oct_def = models.TextField(blank=True, null=True)
    oct_insp_by = models.TextField(blank=True, null=True)
    oct_sign = models.TextField(blank=True, null=True)
    nov_def = models.TextField(blank=True, null=True)
    nov_insp_by = models.TextField(blank=True, null=True)
    nov_sign = models.TextField(blank=True, null=True)
    dec_def = models.TextField(blank=True, null=True)
    dec_insp_by = models.TextField(blank=True, null=True)
    dec_sign = models.TextField(blank=True, null=True)
    inspection = models.ForeignKey(to="Inspections", on_delete=models.CASCADE)

    class Meta:
        db_table = "insp_EyewashStation"

    def __str__(self):
        return self.plants_name


class FireExtinguisher(models.Model):
    id = models.AutoField(primary_key=True)
    plants_name = models.TextField(blank=True, null=True)
    jan_def = models.TextField(blank=True, null=True)
    jan_insp_by = models.TextField(blank=True, null=True)
    jan_sign = models.TextField(blank=True, null=True)
    feb_def = models.TextField(blank=True, null=True)
    feb_insp_by = models.TextField(blank=True, null=True)
    feb_sign = models.TextField(blank=True, null=True)
    mar_def = models.TextField(blank=True, null=True)
    mar_insp_by = models.TextField(blank=True, null=True)
    mar_sign = models.TextField(blank=True, null=True)
    apr_def = models.TextField(blank=True, null=True)
    apr_insp_by = models.TextField(blank=True, null=True)
    apr_sign = models.TextField(blank=True, null=True)
    may_def = models.TextField(blank=True, null=True)
    may_insp_by = models.TextField(blank=True, null=True)
    may_sign = models.TextField(blank=True, null=True)
    jun_def = models.TextField(blank=True, null=True)
    jun_insp_by = models.TextField(blank=True, null=True)
    jun_sign = models.TextField(blank=True, null=True)
    jul_def = models.TextField(blank=True, null=True)
    jul_insp_by = models.TextField(blank=True, null=True)
    jul_sign = models.TextField(blank=True, null=True)
    aug_def = models.TextField(blank=True, null=True)
    aug_insp_by = models.TextField(blank=True, null=True)
    aug_sign = models.TextField(blank=True, null=True)
    sep_def = models.TextField(blank=True, null=True)
    sep_insp_by = models.TextField(blank=True, null=True)
    sep_sign = models.TextField(blank=True, null=True)
    oct_def = models.TextField(blank=True, null=True)
    oct_insp_by = models.TextField(blank=True, null=True)
    oct_sign = models.TextField(blank=True, null=True)
    nov_def = models.TextField(blank=True, null=True)
    nov_insp_by = models.TextField(blank=True, null=True)
    nov_sign = models.TextField(blank=True, null=True)
    dec_def = models.TextField(blank=True, null=True)
    dec_insp_by = models.TextField(blank=True, null=True)
    dec_sign = models.TextField(blank=True, null=True)
    inspection = models.ForeignKey(to="Inspections", on_delete=models.CASCADE)

    class Meta:
        db_table = "insp_FireExtinguisher"

    def __str__(self):
        return self.plants_name


class FirstAid(models.Model):
    id = models.AutoField(primary_key=True)
    plants_name = models.TextField(blank=True, null=True)
    jan_supply = models.TextField(blank=True, null=True)
    jan_insp_by = models.TextField(blank=True, null=True)
    jan_sign = models.TextField(blank=True, null=True)
    feb_supply = models.TextField(blank=True, null=True)
    feb_insp_by = models.TextField(blank=True, null=True)
    feb_sign = models.TextField(blank=True, null=True)
    mar_supply = models.TextField(blank=True, null=True)
    mar_insp_by = models.TextField(blank=True, null=True)
    mar_sign = models.TextField(blank=True, null=True)
    apr_supply = models.TextField(blank=True, null=True)
    apr_insp_by = models.TextField(blank=True, null=True)
    apr_sign = models.TextField(blank=True, null=True)
    may_supply = models.TextField(blank=True, null=True)
    may_insp_by = models.TextField(blank=True, null=True)
    may_sign = models.TextField(blank=True, null=True)
    jun_supply = models.TextField(blank=True, null=True)
    jun_insp_by = models.TextField(blank=True, null=True)
    jun_sign = models.TextField(blank=True, null=True)
    jul_supply = models.TextField(blank=True, null=True)
    jul_insp_by = models.TextField(blank=True, null=True)
    jul_sign = models.TextField(blank=True, null=True)
    aug_supply = models.TextField(blank=True, null=True)
    aug_insp_by = models.TextField(blank=True, null=True)
    aug_sign = models.TextField(blank=True, null=True)
    sep_supply = models.TextField(blank=True, null=True)
    sep_insp_by = models.TextField(blank=True, null=True)
    sep_sign = models.TextField(blank=True, null=True)
    oct_supply = models.TextField(blank=True, null=True)
    oct_insp_by = models.TextField(blank=True, null=True)
    oct_sign = models.TextField(blank=True, null=True)
    nov_supply = models.TextField(blank=True, null=True)
    nov_insp_by = models.TextField(blank=True, null=True)
    nov_sign = models.TextField(blank=True, null=True)
    dec_supply = models.TextField(blank=True, null=True)
    dec_insp_by = models.TextField(blank=True, null=True)
    dec_sign = models.TextField(blank=True, null=True)
    inspection = models.ForeignKey(to="Inspections", on_delete=models.CASCADE)

    class Meta:
        db_table = "insp_FirstAid"

    def __str__(self):
        return self.plants_name


class FormalSite(models.Model):
    id = models.AutoField(primary_key=True)
    plants_name = models.CharField(max_length=50, blank=True)
    des_comment = models.TextField(blank=True)
    insp_one = models.CharField(max_length=50, blank=True)
    sign_one = models.CharField(max_length=50, blank=True)
    date_one = models.CharField(max_length=50, blank=True)
    insp_two = models.CharField(max_length=50, blank=True)
    sign_two = models.CharField(max_length=50, blank=True)
    date_two = models.CharField(max_length=50, blank=True)
    insp_three = models.CharField(max_length=50, blank=True)
    sign_three = models.CharField(max_length=50, blank=True)
    date_three = models.CharField(max_length=50, blank=True)
    insp_four = models.CharField(max_length=50, blank=True)
    sign_four = models.CharField(max_length=50, blank=True)
    date_four = models.CharField(max_length=50, blank=True)
    insp_five = models.CharField(max_length=50, blank=True)
    sign_five = models.CharField(max_length=50, blank=True)
    date_five = models.CharField(max_length=50, blank=True)
    sign = models.CharField(max_length=50, blank=True)
    position = models.CharField(max_length=50, blank=True)
    date = models.CharField(max_length=50, blank=True)
    inspection = models.ForeignKey(to="Inspections", on_delete=models.CASCADE)

    class Meta:
        db_table = "insp_FormalSite"

    def __str__(self):
        return self.plants_name


class GasMonitor(models.Model):
    id = models.AutoField(primary_key=True)
    plants_name = models.TextField(blank=True, null=True)
    date_cali_one = models.TextField(blank=True, null=True)
    location_one = models.TextField(blank=True, null=True)
    date_cali_exp_one = models.TextField(blank=True, null=True)
    date_cali_two = models.TextField(blank=True, null=True)
    location_two = models.TextField(blank=True, null=True)
    date_cali_exp_two = models.TextField(blank=True, null=True)
    date_cali_three = models.TextField(blank=True, null=True)
    location_three = models.TextField(blank=True, null=True)
    date_cali_exp_three = models.TextField(blank=True, null=True)
    date_cali_four = models.TextField(blank=True, null=True)
    location_four = models.TextField(blank=True, null=True)
    date_cali_exp_four = models.TextField(blank=True, null=True)
    date_cali_five = models.TextField(blank=True, null=True)
    location_five = models.TextField(blank=True, null=True)
    date_cali_exp_five = models.TextField(blank=True, null=True)
    date_cali_six = models.TextField(blank=True, null=True)
    location_six = models.TextField(blank=True, null=True)
    date_cali_exp_six = models.TextField(blank=True, null=True)
    date_cali_seven = models.TextField(blank=True, null=True)
    location_seven = models.TextField(blank=True, null=True)
    date_cali_exp_seven = models.TextField(blank=True, null=True)
    date_cali_eight = models.TextField(blank=True, null=True)
    location_eight = models.TextField(blank=True, null=True)
    date_cali_exp_eight = models.TextField(blank=True, null=True)
    date_cali_nine = models.TextField(blank=True, null=True)
    location_nine = models.TextField(blank=True, null=True)
    date_cali_exp_nine = models.TextField(blank=True, null=True)
    date_cali_ten = models.TextField(blank=True, null=True)
    location_ten = models.TextField(blank=True, null=True)
    date_cali_exp_ten = models.TextField(blank=True, null=True)
    date_cali_eleven = models.TextField(blank=True, null=True)
    location_eleven = models.TextField(blank=True, null=True)
    date_cali_exp_eleven = models.TextField(blank=True, null=True)
    date_cali_twelve = models.TextField(blank=True, null=True)
    location_twelve = models.TextField(blank=True, null=True)
    date_cali_exp_twelve = models.TextField(blank=True, null=True)
    inspection = models.ForeignKey(to="Inspections", on_delete=models.CASCADE)

    class Meta:
        db_table = "insp_GasMonitor"

    def __str__(self):
        return self.plants_name


class GasTest(models.Model):
    id = models.AutoField(primary_key=True)
    plants_name = models.TextField(blank=True, null=True)
    date_one = models.TextField(blank=True, null=True)
    time_one = models.TextField(blank=True, null=True)
    oxygen_one = models.TextField(blank=True, null=True)
    lel_one = models.TextField(blank=True, null=True)
    h2s_one = models.TextField(blank=True, null=True)
    co_one = models.TextField(blank=True, null=True)
    other_one = models.TextField(blank=True, null=True)
    initials_one = models.TextField(blank=True, null=True)
    date_two = models.TextField(blank=True, null=True)
    time_two = models.TextField(blank=True, null=True)
    oxygen_two = models.TextField(blank=True, null=True)
    lel_two = models.TextField(blank=True, null=True)
    h2s_two = models.TextField(blank=True, null=True)
    co_two = models.TextField(blank=True, null=True)
    other_two = models.TextField(blank=True, null=True)
    initials_two = models.TextField(blank=True, null=True)
    date_three = models.TextField(blank=True, null=True)
    time_three = models.TextField(blank=True, null=True)
    oxygen_three = models.TextField(blank=True, null=True)
    lel_three = models.TextField(blank=True, null=True)
    h2s_three = models.TextField(blank=True, null=True)
    co_three = models.TextField(blank=True, null=True)
    other_three = models.TextField(blank=True, null=True)
    initials_three = models.TextField(blank=True, null=True)
    date_four = models.TextField(blank=True, null=True)
    time_four = models.TextField(blank=True, null=True)
    oxygen_four = models.TextField(blank=True, null=True)
    lel_four = models.TextField(blank=True, null=True)
    h2s_four = models.TextField(blank=True, null=True)
    co_four = models.TextField(blank=True, null=True)
    other_four = models.TextField(blank=True, null=True)
    initials_four = models.TextField(blank=True, null=True)
    date_five = models.TextField(blank=True, null=True)
    time_five = models.TextField(blank=True, null=True)
    oxygen_five = models.TextField(blank=True, null=True)
    lel_five = models.TextField(blank=True, null=True)
    h2s_five = models.TextField(blank=True, null=True)
    co_five = models.TextField(blank=True, null=True)
    other_five = models.TextField(blank=True, null=True)
    initials_five = models.TextField(blank=True, null=True)
    date_six = models.TextField(blank=True, null=True)
    time_six = models.TextField(blank=True, null=True)
    oxygen_six = models.TextField(blank=True, null=True)
    lel_six = models.TextField(blank=True, null=True)
    h2s_six = models.TextField(blank=True, null=True)
    co_six = models.TextField(blank=True, null=True)
    other_six = models.TextField(blank=True, null=True)
    initials_six = models.TextField(blank=True, null=True)
    date_seven = models.TextField(blank=True, null=True)
    time_seven = models.TextField(blank=True, null=True)
    oxygen_seven = models.TextField(blank=True, null=True)
    lel_seven = models.TextField(blank=True, null=True)
    h2s_seven = models.TextField(blank=True, null=True)
    co_seven = models.TextField(blank=True, null=True)
    other_seven = models.TextField(blank=True, null=True)
    initials_seven = models.TextField(blank=True, null=True)
    date_eight = models.TextField(blank=True, null=True)
    time_eight = models.TextField(blank=True, null=True)
    oxygen_eight = models.TextField(blank=True, null=True)
    lel_eight = models.TextField(blank=True, null=True)
    h2s_eight = models.TextField(blank=True, null=True)
    co_eight = models.TextField(blank=True, null=True)
    other_eight = models.TextField(blank=True, null=True)
    initials_eight = models.TextField(blank=True, null=True)
    date_nine = models.TextField(blank=True, null=True)
    time_nine = models.TextField(blank=True, null=True)
    oxygen_nine = models.TextField(blank=True, null=True)
    lel_nine = models.TextField(blank=True, null=True)
    h2s_nine = models.TextField(blank=True, null=True)
    co_nine = models.TextField(blank=True, null=True)
    other_nine = models.TextField(blank=True, null=True)
    initials_nine = models.TextField(blank=True, null=True)
    date_ten = models.TextField(blank=True, null=True)
    time_ten = models.TextField(blank=True, null=True)
    oxygen_ten = models.TextField(blank=True, null=True)
    lel_ten = models.TextField(blank=True, null=True)
    h2s_ten = models.TextField(blank=True, null=True)
    co_ten = models.TextField(blank=True, null=True)
    other_ten = models.TextField(blank=True, null=True)
    initials_ten = models.TextField(blank=True, null=True)
    inspection = models.ForeignKey(to="Inspections", on_delete=models.CASCADE)

    class Meta:
        db_table = "insp_GasTest"

    def __str__(self):
        return self.plants_name


class GeneralService(models.Model):
    id = models.AutoField(primary_key=True)
    plants_name = models.TextField(blank=True, null=True)
    unit_number = models.TextField(blank=True, null=True)
    des_welder = models.TextField(blank=True, null=True)
    air_filter = models.TextField(blank=True, null=True)
    oil_filter = models.TextField(blank=True, null=True)
    oil = models.TextField(blank=True, null=True)
    hours_one = models.TextField(blank=True, null=True)
    date_one = models.TextField(blank=True, null=True)
    work_per_one = models.TextField(blank=True, null=True)
    hours_two = models.TextField(blank=True, null=True)
    date_two = models.TextField(blank=True, null=True)
    work_per_two = models.TextField(blank=True, null=True)
    hours_three = models.TextField(blank=True, null=True)
    date_three = models.TextField(blank=True, null=True)
    work_per_three = models.TextField(blank=True, null=True)
    hours_four = models.TextField(blank=True, null=True)
    date_four = models.TextField(blank=True, null=True)
    work_per_four = models.TextField(blank=True, null=True)
    hours_five = models.TextField(blank=True, null=True)
    date_five = models.TextField(blank=True, null=True)
    work_per_five = models.TextField(blank=True, null=True)
    hours_six = models.TextField(blank=True, null=True)
    date_six = models.TextField(blank=True, null=True)
    work_per_six = models.TextField(blank=True, null=True)
    hours_seven = models.TextField(blank=True, null=True)
    date_seven = models.TextField(blank=True, null=True)
    work_per_seven = models.TextField(blank=True, null=True)
    hours_eight = models.TextField(blank=True, null=True)
    date_eight = models.TextField(blank=True, null=True)
    work_per_eight = models.TextField(blank=True, null=True)
    hours_nine = models.TextField(blank=True, null=True)
    date_nine = models.TextField(blank=True, null=True)
    work_per_nine = models.TextField(blank=True, null=True)
    hours_ten = models.TextField(blank=True, null=True)
    date_ten = models.TextField(blank=True, null=True)
    work_per_ten = models.TextField(blank=True, null=True)
    hours_eleven = models.TextField(blank=True, null=True)
    date_eleven = models.TextField(blank=True, null=True)
    work_per_eleven = models.TextField(blank=True, null=True)
    hours_twelve = models.TextField(blank=True, null=True)
    date_twelve = models.TextField(blank=True, null=True)
    work_per_twelve = models.TextField(blank=True, null=True)
    hours_thirteen = models.TextField(blank=True, null=True)
    date_thirteen = models.TextField(blank=True, null=True)
    work_per_thirteen = models.TextField(blank=True, null=True)
    inspection = models.ForeignKey(to="Inspections", on_delete=models.CASCADE)

    class Meta:
        db_table = "insp_GeneralService"

    def __str__(self):
        return self.plants_name


class GenericSafe(models.Model):
    id = models.AutoField(primary_key=True)
    plants_name = models.TextField(blank=True, null=True)
    permit_title = models.TextField(blank=True, null=True)
    permits = models.TextField(blank=True, null=True)
    date_from = models.TextField(blank=True, null=True)
    date_to = models.TextField(blank=True, null=True)
    location = models.TextField(blank=True, null=True)
    flha = models.TextField(blank=True, null=True)
    des_work = models.TextField(blank=True, null=True)
    Utilities = models.CharField(max_length=5, blank=True, null=True)
    Activities = models.CharField(max_length=5, blank=True, null=True)
    Materials = models.CharField(max_length=5, blank=True, null=True)
    Lines = models.CharField(max_length=5, blank=True, null=True)
    Crane = models.CharField(max_length=5, blank=True, null=True)
    Substances = models.CharField(max_length=5, blank=True, null=True)
    Congested = models.CharField(max_length=5, blank=True, null=True)
    Pressurized = models.CharField(max_length=5, blank=True, null=True)
    Radiation = models.CharField(max_length=5, blank=True, null=True)
    Excavation = models.CharField(max_length=5, blank=True, null=True)
    Heavy = models.CharField(max_length=5, blank=True, null=True)
    other_hazards = models.TextField(blank=True, null=True)
    access = models.CharField(max_length=5, blank=True, null=True)
    safety_watch = models.TextField(blank=True, null=True)
    Lighting = models.CharField(max_length=5, blank=True, null=True)
    Barricades = models.CharField(max_length=5, blank=True, null=True)
    extinguishers = models.CharField(max_length=5, blank=True, null=True)
    sealed = models.CharField(max_length=5, blank=True, null=True)
    flushed = models.CharField(max_length=5, blank=True, null=True)
    ventilated = models.CharField(max_length=5, blank=True, null=True)
    other_control = models.TextField(blank=True, null=True)
    goggles = models.CharField(max_length=5, blank=True, null=True)
    protection = models.CharField(max_length=5, blank=True, null=True)
    Respiratory = models.CharField(max_length=5, blank=True, null=True)
    rubber = models.CharField(max_length=5, blank=True, null=True)
    Hearing = models.CharField(max_length=5, blank=True, null=True)
    other_equip = models.TextField(blank=True, null=True)
    Electrical = models.CharField(max_length=5, blank=True, null=True)
    mastercard = models.TextField(blank=True, null=True)
    mec = models.CharField(max_length=5, blank=True, null=True)
    Mechanical = models.CharField(max_length=5, blank=True, null=True)
    Rescue = models.CharField(max_length=5, blank=True, null=True)
    Response = models.CharField(max_length=5, blank=True, null=True)
    Communications = models.CharField(max_length=5, blank=True, null=True)
    Safety = models.CharField(max_length=5, blank=True, null=True)
    other_confined = models.TextField(blank=True, null=True)
    gas_test = models.CharField(max_length=5, blank=True, null=True)
    time_one_o2 = models.TextField(blank=True, null=True)
    result_one_o2 = models.TextField(blank=True, null=True)
    initials_one_o2 = models.TextField(blank=True, null=True)
    time_two_o2 = models.TextField(blank=True, null=True)
    result_two_o2 = models.TextField(blank=True, null=True)
    initials_two_o2 = models.TextField(blank=True, null=True)
    time_three_o2 = models.TextField(blank=True, null=True)
    result_three_o2 = models.TextField(blank=True, null=True)
    initials_three_o2 = models.TextField(blank=True, null=True)
    time_four_o2 = models.TextField(blank=True, null=True)
    result_four_o2 = models.TextField(blank=True, null=True)
    initials_four_o2 = models.TextField(blank=True, null=True)
    time_one_h2s = models.TextField(blank=True, null=True)
    result_one_h2s = models.TextField(blank=True, null=True)
    initials_one_h2s = models.TextField(blank=True, null=True)
    time_two_h2s = models.TextField(blank=True, null=True)
    result_two_h2s = models.TextField(blank=True, null=True)
    initials_two_h2s = models.TextField(blank=True, null=True)
    time_three_h2s = models.TextField(blank=True, null=True)
    result_three_h2s = models.TextField(blank=True, null=True)
    initials_three_h2s = models.TextField(blank=True, null=True)
    time_four_h2s = models.TextField(blank=True, null=True)
    initials_four_h2s = models.TextField(blank=True, null=True)
    time_one_lel = models.TextField(blank=True, null=True)
    result_one_lel = models.TextField(blank=True, null=True)
    initials_one_lel = models.TextField(blank=True, null=True)
    time_two_lel = models.TextField(blank=True, null=True)
    result_two_lel = models.TextField(blank=True, null=True)
    initials_two_lel = models.TextField(blank=True, null=True)
    time_three_lel = models.TextField(blank=True, null=True)
    result_three_lel = models.TextField(blank=True, null=True)
    initials_three_lel = models.TextField(blank=True, null=True)
    time_four_lel = models.TextField(blank=True, null=True)
    result_four_lel = models.TextField(blank=True, null=True)
    initials_four_lel = models.TextField(blank=True, null=True)
    time_one_other = models.TextField(blank=True, null=True)
    result_one_other = models.TextField(blank=True, null=True)
    initials_one_other = models.TextField(blank=True, null=True)
    time_two_other = models.TextField(blank=True, null=True)
    result_two_other = models.TextField(blank=True, null=True)
    initials_two_other = models.TextField(blank=True, null=True)
    time_three_other = models.TextField(blank=True, null=True)
    result_three_other = models.TextField(blank=True, null=True)
    initials_three_other = models.TextField(blank=True, null=True)
    time_four_other = models.TextField(blank=True, null=True)
    result_four_other = models.TextField(blank=True, null=True)
    initials_four_other = models.TextField(blank=True, null=True)
    aff_worker_name = models.TextField(blank=True, null=True)
    aff_worker_sign = models.TextField(blank=True, null=True)
    aff_worker_position = models.TextField(blank=True, null=True)
    aff_worker_date = models.TextField(blank=True, null=True)
    aff_worker_name_two = models.TextField(blank=True, null=True)
    aff_worker_sign_two = models.TextField(blank=True, null=True)
    aff_worker_position_two = models.TextField(blank=True, null=True)
    aff_worker_date_two = models.TextField(blank=True, null=True)
    aff_worker_name_three = models.TextField(blank=True, null=True)
    aff_worker_sign_three = models.TextField(blank=True, null=True)
    aff_worker_position_three = models.TextField(blank=True, null=True)
    aff_worker_date_three = models.TextField(blank=True, null=True)
    auth_rec_name = models.TextField(blank=True, null=True)
    auth_rec_sign = models.TextField(blank=True, null=True)
    auth_rec_date = models.TextField(blank=True, null=True)
    auth_iss_name = models.TextField(blank=True, null=True)
    auth_iss_sign = models.TextField(blank=True, null=True)
    auth_iss_date = models.TextField(blank=True, null=True)
    trans_rec_name = models.TextField(blank=True, null=True)
    trans_rec_sign = models.TextField(blank=True, null=True)
    trans_rec_date = models.TextField(blank=True, null=True)
    trans_issu_name = models.TextField(blank=True, null=True)
    trans_issu_sign = models.TextField(blank=True, null=True)
    trans_issu_date = models.TextField(blank=True, null=True)
    close_rec_name = models.TextField(blank=True, null=True)
    close_rec_sign = models.TextField(blank=True, null=True)
    close_rec_date = models.TextField(blank=True, null=True)
    close_issu_name = models.TextField(blank=True, null=True)
    close_issu_sign = models.TextField(blank=True, null=True)
    close_issu_date = models.TextField(blank=True, null=True)
    inspection = models.ForeignKey(to="Inspections", on_delete=models.CASCADE)

    class Meta:
        db_table = "insp_GenericSafe"

    def __str__(self):
        return self.plants_name
    
    
class IndustrialForklift(models.Model):
    id = models.AutoField(primary_key=True)
    plants_name = models.TextField(blank=True, null=True)
    make = models.TextField(blank=True, null=True)
    model = models.TextField(blank=True, null=True)
    good_access = models.TextField(blank=True, null=True)
    rejected_access = models.TextField(blank=True, null=True)
    na_access = models.TextField(blank=True, null=True)
    remark_access = models.TextField(blank=True, null=True)
    good_backup = models.TextField(blank=True, null=True)
    rejected_backup = models.TextField(blank=True, null=True)
    na_backup = models.TextField(blank=True, null=True)
    remark_backup = models.TextField(blank=True, null=True)
    good_body = models.TextField(blank=True, null=True)
    rejected_body = models.TextField(blank=True, null=True)
    na_body = models.TextField(blank=True, null=True)
    remark_body = models.TextField(blank=True, null=True)
    good_brakes = models.TextField(blank=True, null=True)
    rejected_brakes = models.TextField(blank=True, null=True)
    na_brakes = models.TextField(blank=True, null=True)
    remark_brakes = models.TextField(blank=True, null=True)
    good_clutch = models.TextField(blank=True, null=True)
    rejected_clutch = models.TextField(blank=True, null=True)
    na_clutch = models.TextField(blank=True, null=True)
    remark_clutch = models.TextField(blank=True, null=True)
    good_cotter = models.TextField(blank=True, null=True)
    rejected_cotter = models.TextField(blank=True, null=True)
    na_cotter = models.TextField(blank=True, null=True)
    remark_cotter = models.TextField(blank=True, null=True)
    good_cover = models.TextField(blank=True, null=True)
    rejected_cover = models.TextField(blank=True, null=True)
    na_cover = models.TextField(blank=True, null=True)
    remark_cover = models.TextField(blank=True, null=True)
    good_data = models.TextField(blank=True, null=True)
    rejected_data = models.TextField(blank=True, null=True)
    na_data = models.TextField(blank=True, null=True)
    remark_data = models.TextField(blank=True, null=True)
    good_bracket = models.TextField(blank=True, null=True)
    rejected_bracket = models.TextField(blank=True, null=True)
    na_bracket = models.TextField(blank=True, null=True)
    remark_bracket = models.TextField(blank=True, null=True)
    good_fork = models.TextField(blank=True, null=True)
    rejected_fork = models.TextField(blank=True, null=True)
    na_fork = models.TextField(blank=True, null=True)
    remark_fork = models.TextField(blank=True, null=True)
    good_frame = models.TextField(blank=True, null=True)
    rejected_frame = models.TextField(blank=True, null=True)
    na_frame = models.TextField(blank=True, null=True)
    remark_frame = models.TextField(blank=True, null=True)
    good_fuel = models.TextField(blank=True, null=True)
    rejected_fuel = models.TextField(blank=True, null=True)
    na_fuel = models.TextField(blank=True, null=True)
    remark_fuel = models.TextField(blank=True, null=True)
    good_glass = models.TextField(blank=True, null=True)
    rejected_glass = models.TextField(blank=True, null=True)
    na_glass = models.TextField(blank=True, null=True)
    remark_glass = models.TextField(blank=True, null=True)
    good_guards = models.TextField(blank=True, null=True)
    rejected_guards = models.TextField(blank=True, null=True)
    na_guards = models.TextField(blank=True, null=True)
    remark_guards = models.TextField(blank=True, null=True)
    good_horn = models.TextField(blank=True, null=True)
    rejected_horn = models.TextField(blank=True, null=True)
    na_horn = models.TextField(blank=True, null=True)
    remark_horn = models.TextField(blank=True, null=True)
    good_hydraulic = models.TextField(blank=True, null=True)
    rejected_hydraulic = models.TextField(blank=True, null=True)
    na_hydraulic = models.TextField(blank=True, null=True)
    remark_hydraulic = models.TextField(blank=True, null=True)
    good_levers = models.TextField(blank=True, null=True)
    rejected_levers = models.TextField(blank=True, null=True)
    na_levers = models.TextField(blank=True, null=True)
    remark_levers = models.TextField(blank=True, null=True)
    good_lights = models.TextField(blank=True, null=True)
    rejected_lights = models.TextField(blank=True, null=True)
    na_lights = models.TextField(blank=True, null=True)
    remark_lights = models.TextField(blank=True, null=True)
    good_plate = models.TextField(blank=True, null=True)
    rejected_plate = models.TextField(blank=True, null=True)
    na_plate = models.TextField(blank=True, null=True)
    remark_plate = models.TextField(blank=True, null=True)
    good_mirror = models.TextField(blank=True, null=True)
    rejected_mirror = models.TextField(blank=True, null=True)
    na_mirror = models.TextField(blank=True, null=True)
    remark_mirror = models.TextField(blank=True, null=True)
    good_muffler = models.TextField(blank=True, null=True)
    rejected_muffler = models.TextField(blank=True, null=True)
    na_muffler = models.TextField(blank=True, null=True)
    remark_muffler = models.TextField(blank=True, null=True)
    good_muffler_guards = models.TextField(blank=True, null=True)
    rejected_muffler_guards = models.TextField(blank=True, null=True)
    na_muffler_guards = models.TextField(blank=True, null=True)
    remark_muffler_guards = models.TextField(blank=True, null=True)
    good_parking = models.TextField(blank=True, null=True)
    na_parking = models.TextField(blank=True, null=True)
    remark_parking = models.TextField(blank=True, null=True)
    good_decking = models.TextField(blank=True, null=True)
    rejected_decking = models.TextField(blank=True, null=True)
    na_decking = models.TextField(blank=True, null=True)
    remark_decking = models.TextField(blank=True, null=True)
    good_rear = models.TextField(blank=True, null=True)
    rejected_rear = models.TextField(blank=True, null=True)
    na_rear = models.TextField(blank=True, null=True)
    remark_rear = models.TextField(blank=True, null=True)
    good_rollover = models.TextField(blank=True, null=True)
    rejected_rollover = models.TextField(blank=True, null=True)
    na_rollover = models.TextField(blank=True, null=True)
    remark_rollover = models.TextField(blank=True, null=True)
    good_seat = models.TextField(blank=True, null=True)
    rejected_seat = models.TextField(blank=True, null=True)
    na_seat = models.TextField(blank=True, null=True)
    remark_seat = models.TextField(blank=True, null=True)
    good_steering = models.TextField(blank=True, null=True)
    rejected_steering = models.TextField(blank=True, null=True)
    na_steering = models.TextField(blank=True, null=True)
    remark_steering = models.TextField(blank=True, null=True)
    good_tires = models.TextField(blank=True, null=True)
    rejected_tires = models.TextField(blank=True, null=True)
    na_tires = models.TextField(blank=True, null=True)
    remark_tires = models.TextField(blank=True, null=True)
    good_turn = models.TextField(blank=True, null=True)
    rejected_turn = models.TextField(blank=True, null=True)
    na_turn = models.TextField(blank=True, null=True)
    remark_turn = models.TextField(blank=True, null=True)
    good_wippers = models.TextField(blank=True, null=True)
    rejected_wippers = models.TextField(blank=True, null=True)
    na_wippers = models.TextField(blank=True, null=True)
    remark_wippers = models.TextField(blank=True, null=True)
    date = models.TextField(blank=True, null=True)
    inspection = models.ForeignKey(to="Inspections", on_delete=models.CASCADE)

    class Meta:
        db_table = "insp_IndustrialForklift"

    def __str__(self):
        return self.plants_name


class LocationofFirst(models.Model):
    id = models.AutoField(primary_key=True)
    plants_name = models.CharField(max_length=50, blank=True)
    fire_ext = models.CharField(max_length=50, blank=True)
    location = models.CharField(max_length=50, blank=True)
    service_date = models.CharField(max_length=50, blank=True)
    first_aid = models.CharField(max_length=50, blank=True)
    location_two = models.CharField(max_length=50, blank=True)
    name_one = models.CharField(max_length=50, blank=True)
    certificate_one = models.CharField(max_length=50, blank=True)
    name_two = models.CharField(max_length=50, blank=True)
    certificate_two = models.CharField(max_length=50, blank=True)
    name_three = models.CharField(max_length=50, blank=True)
    certificate_three = models.CharField(max_length=50, blank=True)
    name_four = models.CharField(max_length=50, blank=True)
    certificate_four = models.CharField(max_length=50, blank=True)
    name_five = models.CharField(max_length=50, blank=True)
    certificate_five = models.CharField(max_length=50, blank=True)
    name_six = models.CharField(max_length=50, blank=True)
    certificate_six = models.CharField(max_length=50, blank=True)
    inspection = models.ForeignKey(to="Inspections", on_delete=models.CASCADE)

    class Meta:
        db_table = "insp_LocationofFirst"

    def __str__(self):
        return self.plants_name


class LossTimeInjury(models.Model):
    id = models.AutoField(primary_key=True)
    plants_name = models.CharField(max_length=50, blank=True)
    year = models.CharField(max_length=50, blank=True)
    incident_detail = models.CharField(max_length=50, blank=True)
    acc_time_detail = models.CharField(max_length=50, blank=True)
    report_time_detail = models.CharField(max_length=50, blank=True)
    emp_name_detail = models.CharField(max_length=50, blank=True)
    emp_role_detail = models.CharField(max_length=50, blank=True)
    acc_detail = models.CharField(max_length=50, blank=True)
    injury_detail = models.CharField(max_length=50, blank=True)
    treat_detail = models.CharField(max_length=50, blank=True)
    faa_detail = models.CharField(max_length=50, blank=True)
    remark_detail = models.CharField(max_length=50, blank=True)
    loss_detail = models.CharField(max_length=50, blank=True)
    supervisor_detail = models.CharField(max_length=50, blank=True)
    comment_detail = models.CharField(max_length=50, blank=True)
    other_detail = models.CharField(max_length=50, blank=True)
    inspection = models.ForeignKey(to="Inspections", on_delete=models.CASCADE)

    class Meta:
        db_table = "insp_LossTimeInjury"

    def __str__(self):
        return self.plants_name


class MaintenanceRecord(models.Model):
    id = models.AutoField(primary_key=True)
    plants_name = models.TextField(blank=True, null=True)
    unit = models.TextField(blank=True, null=True)
    unit_des = models.TextField(blank=True, null=True)
    operator_one = models.TextField(blank=True, null=True)
    maintenance_one = models.TextField(blank=True, null=True)
    comment_one = models.TextField(blank=True, null=True)
    date_one = models.TextField(blank=True, null=True)
    initial_one = models.TextField(blank=True, null=True)
    operator_two = models.TextField(blank=True, null=True)
    maintenance_two = models.TextField(blank=True, null=True)
    comment_two = models.TextField(blank=True, null=True)
    date_two = models.TextField(blank=True, null=True)
    initial_two = models.TextField(blank=True, null=True)
    operator_three = models.TextField(blank=True, null=True)
    maintenance_three = models.TextField(blank=True, null=True)
    comment_three = models.TextField(blank=True, null=True)
    date_three = models.TextField(blank=True, null=True)
    initial_three = models.TextField(blank=True, null=True)
    operator_four = models.TextField(blank=True, null=True)
    maintenance_four = models.TextField(blank=True, null=True)
    comment_four = models.TextField(blank=True, null=True)
    date_four = models.TextField(blank=True, null=True)
    initial_four = models.TextField(blank=True, null=True)
    operator_five = models.TextField(blank=True, null=True)
    maintenance_five = models.TextField(blank=True, null=True)
    comment_five = models.TextField(blank=True, null=True)
    date_five = models.TextField(blank=True, null=True)
    initial_five = models.TextField(blank=True, null=True)
    operator_six = models.TextField(blank=True, null=True)
    maintenance_six = models.TextField(blank=True, null=True)
    comment_six = models.TextField(blank=True, null=True)
    date_six = models.TextField(blank=True, null=True)
    initial_six = models.TextField(blank=True, null=True)
    operator_seven = models.TextField(blank=True, null=True)
    maintenance_seven = models.TextField(blank=True, null=True)
    comment_seven = models.TextField(blank=True, null=True)
    date_seven = models.TextField(blank=True, null=True)
    initial_seven = models.TextField(blank=True, null=True)
    operator_eight = models.TextField(blank=True, null=True)
    maintenance_eight = models.TextField(blank=True, null=True)
    comment_eight = models.TextField(blank=True, null=True)
    date_eight = models.TextField(blank=True, null=True)
    initial_eight = models.TextField(blank=True, null=True)
    operator_nine = models.TextField(blank=True, null=True)
    maintenance_nine = models.TextField(blank=True, null=True)
    comment_nine = models.TextField(blank=True, null=True)
    date_nine = models.TextField(blank=True, null=True)
    initial_nine = models.TextField(blank=True, null=True)
    operator_ten = models.TextField(blank=True, null=True)
    maintenance_ten = models.TextField(blank=True, null=True)
    comment_ten = models.TextField(blank=True, null=True)
    date_ten = models.TextField(blank=True, null=True)
    initial_ten = models.TextField(blank=True, null=True)
    operator_eleven = models.TextField(blank=True, null=True)
    maintenance_eleven = models.TextField(blank=True, null=True)
    comment_eleven = models.TextField(blank=True, null=True)
    date_eleven = models.TextField(blank=True, null=True)
    initial_eleven = models.TextField(blank=True, null=True)
    operator_twelve = models.TextField(blank=True, null=True)
    maintenance_twelve = models.TextField(blank=True, null=True)
    comment_twelve = models.TextField(blank=True, null=True)
    date_twelve = models.TextField(blank=True, null=True)
    initial_twelve = models.TextField(blank=True, null=True)
    operator_thirteen = models.TextField(blank=True, null=True)
    maintenance_thirteen = models.TextField(blank=True, null=True)
    comment_thirteen = models.TextField(blank=True, null=True)
    date_thirteen = models.TextField(blank=True, null=True)
    initial_thirteen = models.TextField(blank=True, null=True)
    operator_fourteen = models.TextField(blank=True, null=True)
    maintenance_fourteen = models.TextField(blank=True, null=True)
    comment_fourteen = models.TextField(blank=True, null=True)
    date_fourteen = models.TextField(blank=True, null=True)
    initial_fourteen = models.TextField(blank=True, null=True)
    year_completed = models.TextField(blank=True, null=True)
    inspection = models.ForeignKey(to="Inspections", on_delete=models.CASCADE)

    class Meta:
        db_table = "insp_MaintenanceRecord"

    def __str__(self):
        return self.plants_name


class ManagementofChange(models.Model):
    id = models.AutoField(primary_key=True)
    plants_name = models.TextField(blank=True, null=True)
    title_change = models.TextField(blank=True, null=True)
    req_name = models.TextField(blank=True, null=True)
    req_site = models.TextField(blank=True, null=True)
    req_date = models.TextField(blank=True, null=True)
    type_change = models.TextField(blank=True, null=True)
    other_type_change = models.TextField(blank=True, null=True)
    change_dur = models.TextField(blank=True, null=True)
    des_change = models.TextField(blank=True, null=True)
    business_change = models.TextField(blank=True, null=True)
    proposed_start_date = models.TextField(blank=True, null=True)
    implement_change = models.TextField(blank=True, null=True)
    app_name_one = models.TextField(blank=True, null=True)
    sign_one = models.TextField(blank=True, null=True)
    date_one = models.TextField(blank=True, null=True)
    app_name_two = models.TextField(blank=True, null=True)
    sign_two = models.TextField(blank=True, null=True)
    date_two = models.TextField(blank=True, null=True)
    app_name_three = models.TextField(blank=True, null=True)
    sign_three = models.TextField(blank=True, null=True)
    date_three = models.TextField(blank=True, null=True)
    app_name_four = models.TextField(blank=True, null=True)
    sign_four = models.TextField(blank=True, null=True)
    date_four = models.TextField(blank=True, null=True)
    app_name_five = models.TextField(blank=True, null=True)
    sign_five = models.TextField(blank=True, null=True)
    date_five = models.TextField(blank=True, null=True)
    stakeholder = models.CharField(max_length=5, blank=True, null=True)
    procedures = models.CharField(max_length=5, blank=True, null=True)
    business = models.CharField(max_length=5, blank=True, null=True)
    assessment = models.CharField(max_length=5, blank=True, null=True)
    Information = models.CharField(max_length=5, blank=True, null=True)
    includes = models.CharField(max_length=5, blank=True, null=True)
    Covered = models.CharField(max_length=5, blank=True, null=True)
    app_name_six = models.TextField(blank=True, null=True)
    sign_six = models.TextField(blank=True, null=True)
    date_six = models.TextField(blank=True, null=True)
    app_name_seven = models.TextField(blank=True, null=True)
    sign_seven = models.TextField(blank=True, null=True)
    date_seven = models.TextField(blank=True, null=True)
    app_name_eight = models.TextField(blank=True, null=True)
    sign_eight = models.TextField(blank=True, null=True)
    date_eight = models.TextField(blank=True, null=True)
    communications = models.CharField(max_length=5, blank=True, null=True)
    Startup = models.CharField(max_length=5, blank=True, null=True)
    required = models.CharField(max_length=5, blank=True, null=True)
    comments = models.TextField(blank=True, null=True)
    reviewer = models.TextField(blank=True, null=True)
    sign = models.TextField(blank=True, null=True)
    date_closed = models.TextField(blank=True, null=True)
    inspection = models.ForeignKey(to="Inspections", on_delete=models.CASCADE)

    class Meta:
        db_table = "insp_ManagementofChange"

    def __str__(self):
        return self.plants_name


class MobileEquipment(models.Model):
    id = models.AutoField(primary_key=True)
    plants_name = models.TextField(blank=True, null=True)
    date_issue = models.TextField(blank=True, null=True)
    date_expire = models.TextField(blank=True, null=True)
    des_work = models.TextField(blank=True, null=True)
    work_location = models.TextField(blank=True, null=True)
    types = models.TextField(blank=True, null=True)
    dis_pipline = models.TextField(blank=True, null=True)
    load_conf = models.TextField(blank=True, null=True)
    tag_line = models.TextField(blank=True, null=True)
    tag_lines = models.TextField(blank=True, null=True)
    swing_radius = models.TextField(blank=True, null=True)
    Spotter = models.CharField(max_length=5, blank=True, null=True)
    Barricades = models.CharField(max_length=5, blank=True, null=True)
    Additional = models.CharField(max_length=5, blank=True, null=True)
    specigy_ppe = models.TextField(blank=True, null=True)
    pipeline_content = models.TextField(blank=True, null=True)
    pipeline_size = models.TextField(blank=True, null=True)
    Shutdown = models.CharField(max_length=5, blank=True, null=True)
    protective = models.CharField(max_length=5, blank=True, null=True)
    Underground = models.CharField(max_length=5, blank=True, null=True)
    precaution = models.TextField(blank=True, null=True)
    response_line = models.TextField(blank=True, null=True)
    absp_supervisor = models.TextField(blank=True, null=True)
    date = models.TextField(blank=True, null=True)
    contractor_supervisor = models.TextField(blank=True, null=True)
    date_two = models.TextField(blank=True, null=True)
    oper_supervisor = models.TextField(blank=True, null=True)
    date_three = models.TextField(blank=True, null=True)
    engineer = models.TextField(blank=True, null=True)
    date_four = models.TextField(blank=True, null=True)
    craft_supervisor = models.TextField(blank=True, null=True)
    date_five = models.TextField(blank=True, null=True)
    hse_lead = models.TextField(blank=True, null=True)
    date_six = models.TextField(blank=True, null=True)
    inspection = models.ForeignKey(to="Inspections", on_delete=models.CASCADE)

    class Meta:
        db_table = "insp_MobileEquipment"

    def __str__(self):
        return self.plants_name


class MonthlyOffice(models.Model):
    id = models.AutoField(primary_key=True)
    plants_name = models.TextField(blank=True, null=True)
    inspections_loose = models.CharField(max_length=5, blank=True, null=True)
    inspections_loose_comment = models.TextField(blank=True, null=True)
    inspections_floors = models.CharField(max_length=5, blank=True, null=True)
    inspections_floors_comments = models.TextField(blank=True, null=True)
    inspections_clear = models.CharField(max_length=5, blank=True, null=True)
    inspections_clear_comments = models.TextField(blank=True, null=True)
    inspections_stairways = models.CharField(max_length=5, blank=True, null=True)
    inspections_stairways_comments = models.TextField(blank=True, null=True)
    inspections_handrails = models.CharField(max_length=5, blank=True, null=True)
    inspections_handrails_comments = models.TextField(blank=True, null=True)
    inspections_aisles = models.CharField(max_length=5, blank=True, null=True)
    inspections_aisles_comments = models.TextField(blank=True, null=True)
    inspections_guards = models.CharField(max_length=5, blank=True, null=True)
    inspections_guards_comments = models.TextField(blank=True, null=True)
    inspections_furniture = models.CharField(max_length=5, blank=True, null=True)
    inspections_furniture_comments = models.TextField(blank=True, null=True)
    inspections_ladders = models.CharField(max_length=5, blank=True, null=True)
    inspections_ladders_comments = models.TextField(blank=True, null=True)
    inspections_fire = models.CharField(max_length=5, blank=True, null=True)
    inspections_fire_comments = models.TextField(blank=True, null=True)
    inspections_control = models.CharField(max_length=5, blank=True, null=True)
    inspections_control_comments = models.TextField(blank=True, null=True)
    inspections_emergency = models.CharField(max_length=5, blank=True, null=True)
    inspections_emergency_comments = models.TextField(blank=True, null=True)
    inspections_buildings = models.CharField(max_length=5, blank=True, null=True)
    inspections_buildings_comments = models.TextField(blank=True, null=True)
    inspections_materials = models.CharField(max_length=5, blank=True, null=True)
    inspections_materials_comments = models.TextField(blank=True, null=True)
    inspections_substances = models.CharField(max_length=5, blank=True, null=True)
    inspections_substances_comments = models.TextField(blank=True, null=True)
    inspections_washrooms = models.CharField(max_length=5, blank=True, null=True)
    inspections_washrooms_comments = models.TextField(blank=True, null=True)
    inspections_adequately = models.CharField(max_length=5, blank=True, null=True)
    inspections_adequately_comments = models.TextField(blank=True, null=True)
    inspections_disease = models.CharField(max_length=5, blank=True, null=True)
    inspections_disease_comments = models.TextField(blank=True, null=True)
    inspections_personal = models.CharField(max_length=5, blank=True, null=True)
    inspections_personal_comments = models.TextField(blank=True, null=True)
    inspections_threat = models.CharField(max_length=5, blank=True, null=True)
    inspections_threat_comments = models.TextField(blank=True, null=True)
    inspections_reflectors = models.CharField(max_length=5, blank=True, null=True)
    inspections_reflectors_comments = models.TextField(blank=True, null=True)
    inspections_missing = models.CharField(max_length=5, blank=True, null=True)
    inspections_missing_comments = models.TextField(blank=True, null=True)
    inspections_areas = models.CharField(max_length=5, blank=True, null=True)
    inspections_areas_comments = models.TextField(blank=True, null=True)
    inspections_neatly = models.CharField(max_length=5, blank=True, null=True)
    inspections_neatly_comments = models.TextField(blank=True, null=True)
    inspections_stepladders = models.CharField(max_length=5, blank=True, null=True)
    inspections_stepladders_comments = models.TextField(blank=True, null=True)
    inspections_shelves = models.CharField(max_length=5, blank=True, null=True)
    inspections_shelves_comments = models.TextField(blank=True, null=True)
    inspections_heavy = models.CharField(max_length=5, blank=True, null=True)
    inspections_heavy_comments = models.TextField(blank=True, null=True)
    inspections_passageways = models.CharField(max_length=5, blank=True, null=True)
    inspections_passageways_comments = models.TextField(blank=True, null=True)
    inspections_extension = models.CharField(max_length=5, blank=True, null=True)
    inspections_extension_comments = models.TextField(blank=True, null=True)
    inspections_telephone = models.CharField(max_length=5, blank=True, null=True)
    inspections_telephone_comments = models.TextField(blank=True, null=True)
    inspections_wiring = models.CharField(max_length=5, blank=True, null=True)
    inspections_wiring_comments = models.TextField(blank=True, null=True)
    inspections_sharp = models.CharField(max_length=5, blank=True, null=True)
    inspections_sharp_comments = models.TextField(blank=True, null=True)
    inspections_ceiling = models.CharField(max_length=5, blank=True, null=True)
    inspections_ceiling_comments = models.TextField(blank=True, null=True)
    inspections_disposed = models.CharField(max_length=5, blank=True, null=True)
    inspections_disposed_comments = models.TextField(blank=True, null=True)
    inspections_drawers = models.CharField(max_length=5, blank=True, null=True)
    inspections_drawers_comments = models.TextField(blank=True, null=True)
    inspections_accessories = models.CharField(max_length=5, blank=True, null=True)
    inspections_accessories_comments = models.TextField(blank=True, null=True)
    inspections_stacked = models.CharField(max_length=5, blank=True, null=True)
    inspections_stacked_comments = models.TextField(blank=True, null=True)
    inspections_cabinet = models.CharField(max_length=5, blank=True, null=True)
    inspections_cabinet_comments = models.TextField(blank=True, null=True)
    inspections_heaviest = models.CharField(max_length=5, blank=True, null=True)
    inspections_heaviest_comments = models.TextField(blank=True, null=True)
    inspections_stools = models.CharField(max_length=5, blank=True, null=True)
    inspections_stools_comments = models.TextField(blank=True, null=True)
    observation = models.TextField(blank=True, null=True)
    observation_one = models.CharField(max_length=5, blank=True, null=True)
    observation_one_comments = models.TextField(blank=True, null=True)
    observation2 = models.TextField(blank=True, null=True)
    observation_two = models.CharField(max_length=5, blank=True, null=True)
    observation_two_comments = models.TextField(blank=True, null=True)
    observation3 = models.TextField(blank=True, null=True)
    observation_three = models.CharField(max_length=5, blank=True, null=True)
    observation_three_comments = models.TextField(blank=True, null=True)
    observation4 = models.TextField(blank=True, null=True)
    observation_four = models.CharField(max_length=5, blank=True, null=True)
    observation_four_comments = models.TextField(blank=True, null=True)
    action_one = models.TextField(blank=True, null=True)
    person_one = models.TextField(blank=True, null=True)
    target_one = models.TextField(blank=True, null=True)
    action_two = models.TextField(blank=True, null=True)
    person_two = models.TextField(blank=True, null=True)
    target_two = models.TextField(blank=True, null=True)
    action_three = models.TextField(blank=True, null=True)
    person_three = models.TextField(blank=True, null=True)
    persone_three = models.TextField(blank=True, null=True)
    date = models.TextField(blank=True, null=True)
    location = models.TextField(blank=True, null=True)
    insp_name = models.TextField(blank=True, null=True)
    sign = models.TextField(blank=True, null=True)
    inspection = models.ForeignKey(to="Inspections", on_delete=models.CASCADE)

    class Meta:
        db_table = "insp_MonthlyOffice"

    def __str__(self):
        return self.plants_name


class NewEmployee(models.Model):
    id = models.AutoField(primary_key=True)
    plants_name = models.TextField(blank=True, null=True)
    date = models.TextField(blank=True, null=True)
    emp_name = models.TextField(blank=True, null=True)
    addr = models.TextField(blank=True, null=True)
    cell = models.TextField(blank=True, null=True)
    email_addr = models.TextField(blank=True, null=True)
    emergency_contact = models.TextField(blank=True, null=True)
    phone_num = models.TextField(blank=True, null=True)
    hire_date = models.TextField(blank=True, null=True)
    position = models.TextField(blank=True, null=True)
    supervisor = models.TextField(blank=True, null=True)
    probation_end_date = models.TextField(blank=True, null=True)
    pre_exp = models.TextField(blank=True, null=True)
    done_company = models.TextField(blank=True, null=True)
    na_company = models.TextField(blank=True, null=True)
    done_awarness = models.TextField(blank=True, null=True)
    na_awarness = models.TextField(blank=True, null=True)
    done_emp_resp = models.TextField(blank=True, null=True)
    na_emp_resp = models.TextField(blank=True, null=True)
    done_safety = models.TextField(blank=True, null=True)
    na_safety = models.TextField(blank=True, null=True)
    done_safe_work = models.TextField(blank=True, null=True)
    na_safe_work = models.TextField(blank=True, null=True)
    done_emer_num = models.TextField(blank=True, null=True)
    na_emer_num = models.TextField(blank=True, null=True)
    done_house = models.TextField(blank=True, null=True)
    na_house = models.TextField(blank=True, null=True)
    done_emer_plan = models.TextField(blank=True, null=True)
    na_emer_plan = models.TextField(blank=True, null=True)
    done_work_alone = models.TextField(blank=True, null=True)
    na_work_alone = models.TextField(blank=True, null=True)
    done_insp = models.TextField(blank=True, null=True)
    na_insp = models.TextField(blank=True, null=True)
    done_right = models.TextField(blank=True, null=True)
    na_right = models.TextField(blank=True, null=True)
    done_hazards = models.TextField(blank=True, null=True)
    na_hazards = models.TextField(blank=True, null=True)
    done_general = models.TextField(blank=True, null=True)
    na_general = models.TextField(blank=True, null=True)
    done_disc = models.TextField(blank=True, null=True)
    na_disc = models.TextField(blank=True, null=True)
    done_personal = models.TextField(blank=True, null=True)
    na_personal = models.TextField(blank=True, null=True)
    done_wcb = models.TextField(blank=True, null=True)
    na_wcb = models.TextField(blank=True, null=True)
    done_illn = models.TextField(blank=True, null=True)
    na_illn = models.TextField(blank=True, null=True)
    done_tickets = models.TextField(blank=True, null=True)
    na_tickets = models.TextField(blank=True, null=True)
    done_drug = models.TextField(blank=True, null=True)
    na_drug = models.TextField(blank=True, null=True)
    done_resume = models.TextField(blank=True, null=True)
    na_resume = models.TextField(blank=True, null=True)
    done_form = models.TextField(blank=True, null=True)
    na_form = models.TextField(blank=True, null=True)
    done_driving = models.TextField(blank=True, null=True)
    na_driving = models.TextField(blank=True, null=True)
    emp_sign = models.TextField(blank=True, null=True)
    trainer_sign = models.TextField(blank=True, null=True)
    des_training = models.TextField(blank=True, null=True)
    duration_training = models.TextField(blank=True, null=True)
    trainer = models.TextField(blank=True, null=True)
    inspection = models.ForeignKey(to="Inspections", on_delete=models.CASCADE)

    class Meta:
        db_table = "insp_NewEmployee"

    def __str__(self):
        return self.plants_name


class PersonalLock(models.Model):
    id = models.AutoField(primary_key=True)
    plants_name = models.CharField(max_length=50, blank=True)
    emp_name = models.CharField(max_length=50, blank=True)
    master_card = models.CharField(max_length=50, blank=True)
    reason_tag = models.CharField(max_length=100, blank=True)
    des_reason_tag = models.TextField(blank=True)
    owner_site = models.CharField(max_length=50, blank=True)
    tried_contact = models.CharField(max_length=50, blank=True)
    des_emp_contact = models.TextField(blank=True)
    equip_test = models.CharField(max_length=50, blank=True)
    safe_to_remove = models.CharField(max_length=50, blank=True)
    des_measures = models.TextField(blank=True)
    equip_name = models.CharField(max_length=50, blank=True)
    equip_sign = models.CharField(max_length=50, blank=True)
    equip_date = models.CharField(max_length=50, blank=True)
    authorization = models.CharField(max_length=50, blank=True)
    supervisor_name = models.CharField(max_length=50, blank=True)
    lock_sign = models.CharField(max_length=50, blank=True)
    lock_date = models.CharField(max_length=50, blank=True)
    lead_name = models.CharField(max_length=50, blank=True)
    absp_sign = models.CharField(max_length=50, blank=True)
    absp_date = models.CharField(max_length=50, blank=True)
    inspection = models.ForeignKey(to="Inspections", on_delete=models.CASCADE)

    class Meta:
        db_table = "insp_PersonalLock"

    def __str__(self):
        return self.plants_name


class PortableLadder(models.Model):
    id = models.AutoField(primary_key=True)
    plants_name = models.CharField(max_length=50, blank=True)
    checklist_ladder = models.TextField(blank=True)
    checklist_steps = models.CharField(max_length=15, blank=True)
    checklist_nails = models.CharField(max_length=15, blank=True)
    checklist_split = models.CharField(max_length=15, blank=True)
    checklist_uprights = models.CharField(max_length=15, blank=True)
    checklist_cleats = models.CharField(max_length=15, blank=True)
    checklist_missing = models.CharField(max_length=15, blank=True)
    checklist_corrugated = models.CharField(max_length=15, blank=True)
    checklist_grease = models.CharField(max_length=15, blank=True)
    checklist_splinters = models.CharField(max_length=15, blank=True)
    checklist_painted = models.CharField(max_length=15, blank=True)
    checklist_rungs = models.CharField(max_length=15, blank=True)
    checklist_freely = models.CharField(max_length=15, blank=True)
    checklist_worn = models.CharField(max_length=15, blank=True)
    checklist_cracks = models.CharField(max_length=15, blank=True)
    checklist_wobbly = models.CharField(max_length=15, blank=True)
    checklist_hinge = models.CharField(max_length=15, blank=True)
    checklist_spreaders = models.CharField(max_length=15, blank=True)
    checklist_Loose = models.CharField(max_length=15, blank=True)
    checklist_extension = models.CharField(max_length=15, blank=True)
    checklist_rope = models.CharField(max_length=15, blank=True)
    checklist_sections = models.CharField(max_length=15, blank=True)
    checklist_metal = models.CharField(max_length=15, blank=True)
    checklist_exceed = models.CharField(max_length=15, blank=True)
    checklist_feet = models.CharField(max_length=15, blank=True)
    comments = models.CharField(max_length=50, blank=True)
    date = models.CharField(max_length=50, blank=True)
    ladder_id = models.CharField(max_length=50, blank=True)
    insp_name = models.CharField(max_length=50, blank=True)
    sign = models.CharField(max_length=50, blank=True)
    inspection = models.ForeignKey(to="Inspections", on_delete=models.CASCADE)

    class Meta:
        db_table = "insp_PortableLadder"

    def __str__(self):
        return self.plants_name


class QuarterlyOxygen(models.Model):
    id = models.AutoField(primary_key=True)
    plants_name = models.CharField(max_length=50, blank=True)
    check_regulator = models.CharField(max_length=15, blank=True)
    check_screens = models.CharField(max_length=15, blank=True)
    check_pressure = models.CharField(max_length=15, blank=True)
    check_leaking = models.CharField(max_length=15, blank=True)
    check_cylinder = models.CharField(max_length=15, blank=True)
    check_hose = models.CharField(max_length=15, blank=True)
    check_hoses = models.CharField(max_length=15, blank=True)
    check_inspect = models.CharField(max_length=15, blank=True)
    check_arrester = models.CharField(max_length=15, blank=True)
    check_rings = models.CharField(max_length=15, blank=True)
    check_chamber = models.CharField(max_length=15, blank=True)
    check_head = models.CharField(max_length=15, blank=True)
    check_instructions = models.CharField(max_length=15, blank=True)
    action = models.CharField(max_length=50, blank=True)
    person = models.CharField(max_length=50, blank=True)
    target = models.CharField(max_length=50, blank=True)
    action_two = models.CharField(max_length=50, blank=True)
    person_two = models.CharField(max_length=50, blank=True)
    target_two = models.CharField(max_length=50, blank=True)
    date = models.CharField(max_length=50, blank=True)
    unit_id = models.CharField(max_length=50, blank=True)
    insp_name = models.CharField(max_length=50, blank=True)
    sign = models.CharField(max_length=50, blank=True)
    inspection = models.ForeignKey(to="Inspections", on_delete=models.CASCADE)

    class Meta:
        db_table = "insp_QuarterlyOxygen"

    def __str__(self):
        return self.plants_name


class SafetyStatistics(models.Model):
    id = models.AutoField(primary_key=True)
    plants_name = models.TextField(blank=True, null=True)
    year = models.TextField(blank=True, null=True)
    jan_lost_time = models.TextField(blank=True, null=True)
    jan_lost_days = models.TextField(blank=True, null=True)
    jan_aid_acc = models.TextField(blank=True, null=True)
    jan_incident = models.TextField(blank=True, null=True)
    jan_worked = models.TextField(blank=True, null=True)
    jan_vehicle_acc = models.TextField(blank=True, null=True)
    jan_travel = models.TextField(blank=True, null=True)
    feb_lost_time = models.TextField(blank=True, null=True)
    feb_lost_days = models.TextField(blank=True, null=True)
    feb_aid_acc = models.TextField(blank=True, null=True)
    feb_incident = models.TextField(blank=True, null=True)
    feb_worked = models.TextField(blank=True, null=True)
    feb_vehicle_acc = models.TextField(blank=True, null=True)
    feb_travel = models.TextField(blank=True, null=True)
    mar_lost_time = models.TextField(blank=True, null=True)
    mar_lost_days = models.TextField(blank=True, null=True)
    mar_aid_acc = models.TextField(blank=True, null=True)
    mar_incident = models.TextField(blank=True, null=True)
    mar_worked = models.TextField(blank=True, null=True)
    mar_vehicle_acc = models.TextField(blank=True, null=True)
    mar_travel = models.TextField(blank=True, null=True)
    apr_lost_time = models.TextField(blank=True, null=True)
    apr_lost_days = models.TextField(blank=True, null=True)
    apr_aid_acc = models.TextField(blank=True, null=True)
    apr_incident = models.TextField(blank=True, null=True)
    apr_worked = models.TextField(blank=True, null=True)
    apr_vehicle_acc = models.TextField(blank=True, null=True)
    apr_travel = models.TextField(blank=True, null=True)
    may_lost_time = models.TextField(blank=True, null=True)
    may_lost_days = models.TextField(blank=True, null=True)
    may_aid_acc = models.TextField(blank=True, null=True)
    may_incident = models.TextField(blank=True, null=True)
    may_worked = models.TextField(blank=True, null=True)
    may_vehicle_acc = models.TextField(blank=True, null=True)
    may_travel = models.TextField(blank=True, null=True)
    jun_lost_time = models.TextField(blank=True, null=True)
    jun_lost_days = models.TextField(blank=True, null=True)
    jun_aid_acc = models.TextField(blank=True, null=True)
    jun_incident = models.TextField(blank=True, null=True)
    jun_worked = models.TextField(blank=True, null=True)
    jun_vehicle_acc = models.TextField(blank=True, null=True)
    jun_travel = models.TextField(blank=True, null=True)
    jul_lost_time = models.TextField(blank=True, null=True)
    jul_lost_days = models.TextField(blank=True, null=True)
    jul_aid_acc = models.TextField(blank=True, null=True)
    jul_incident = models.TextField(blank=True, null=True)
    jul_worked = models.TextField(blank=True, null=True)
    jul_vehicle_acc = models.TextField(blank=True, null=True)
    jul_travel = models.TextField(blank=True, null=True)
    aug_lost_time = models.TextField(blank=True, null=True)
    aug_lost_days = models.TextField(blank=True, null=True)
    aug_aid_acc = models.TextField(blank=True, null=True)
    aug_incident = models.TextField(blank=True, null=True)
    aug_worked = models.TextField(blank=True, null=True)
    aug_vehicle_acc = models.TextField(blank=True, null=True)
    aug_travel = models.TextField(blank=True, null=True)
    sep_lost_time = models.TextField(blank=True, null=True)
    sep_lost_days = models.TextField(blank=True, null=True)
    sep_aid_acc = models.TextField(blank=True, null=True)
    sep_incident = models.TextField(blank=True, null=True)
    sep_worked = models.TextField(blank=True, null=True)
    sep_vehicle_acc = models.TextField(blank=True, null=True)
    sep_travel = models.TextField(blank=True, null=True)
    oct_lost_time = models.TextField(blank=True, null=True)
    oct_lost_days = models.TextField(blank=True, null=True)
    oct_aid_acc = models.TextField(blank=True, null=True)
    oct_incident = models.TextField(blank=True, null=True)
    oct_worked = models.TextField(blank=True, null=True)
    oct_vehicle_acc = models.TextField(blank=True, null=True)
    oct_travel = models.TextField(blank=True, null=True)
    nov_lost_time = models.TextField(blank=True, null=True)
    nov_lost_days = models.TextField(blank=True, null=True)
    nov_aid_acc = models.TextField(blank=True, null=True)
    nov_incident = models.TextField(blank=True, null=True)
    nov_worked = models.TextField(blank=True, null=True)
    nov_vehicle_acc = models.TextField(blank=True, null=True)
    nov_travel = models.TextField(blank=True, null=True)
    dec_lost_time = models.TextField(blank=True, null=True)
    dec_lost_days = models.TextField(blank=True, null=True)
    dec_aid_acc = models.TextField(blank=True, null=True)
    dec_incident = models.TextField(blank=True, null=True)
    dec_worked = models.TextField(blank=True, null=True)
    dec_vehicle_acc = models.TextField(blank=True, null=True)
    dec_travel = models.TextField(blank=True, null=True)
    total_lost_time = models.TextField(blank=True, null=True)
    total_lost_days = models.TextField(blank=True, null=True)
    total_aid_acc = models.TextField(blank=True, null=True)
    total_incident = models.TextField(blank=True, null=True)
    total_worked = models.TextField(blank=True, null=True)
    total_vehicle_acc = models.TextField(blank=True, null=True)
    total_travel = models.TextField(blank=True, null=True)
    ttl_lost_time = models.TextField(blank=True, null=True)
    result_A = models.TextField(blank=True, null=True)
    ttl_hr_worked = models.TextField(blank=True, null=True)
    result_B = models.TextField(blank=True, null=True)
    ttl_lost_time_result = models.TextField(blank=True, null=True)
    ttl_lost_day = models.TextField(blank=True, null=True)
    result_C = models.TextField(blank=True, null=True)
    ttl_hr_worked_day = models.TextField(blank=True, null=True)
    result_D = models.TextField(blank=True, null=True)
    ttl_lost_day_result = models.TextField(blank=True, null=True)
    inspection = models.ForeignKey(to="Inspections", on_delete=models.CASCADE)

    class Meta:
        db_table = "insp_SafetyStatistics"

    def __str__(self):
        return self.plants_name


class ScaffoldInspection(models.Model):
    id = models.AutoField(primary_key=True)
    plants_name = models.TextField(blank=True, null=True)
    checklist_scaffolding = models.CharField(max_length=5, blank=True, null=True)
    checklist_scaffolding_comment = models.TextField(blank=True, null=True)
    checklist_instructions = models.CharField(max_length=5, blank=True, null=True)
    checklist_instructions_comment = models.TextField(blank=True, null=True)
    checklist_plates = models.CharField(max_length=5, blank=True, null=True)
    checklist_plates_comment = models.TextField(blank=True, null=True)
    checklist_frames = models.CharField(max_length=5, blank=True, null=True)
    checklist_frames_comment = models.TextField(blank=True, null=True)
    checklist_supervised = models.CharField(max_length=5, blank=True, null=True)
    checklist_supervised_comment = models.TextField(blank=True, null=True)
    checklist_imposed = models.CharField(max_length=5, blank=True, null=True)
    checklist_imposed_comment = models.TextField(blank=True, null=True)
    checklist_horizontal = models.CharField(max_length=5, blank=True, null=True)
    checklist_horizontal_comment = models.TextField(blank=True, null=True)
    checklist_planked = models.CharField(max_length=5, blank=True, null=True)
    checklist_planked_comment = models.TextField(blank=True, null=True)
    checklist_frames_planks = models.CharField(max_length=5, blank=True, null=True)
    checklist_frames_planks_comment = models.TextField(blank=True, null=True)
    checklist_inches = models.CharField(max_length=5, blank=True, null=True)
    checklist_inches_comment = models.TextField(blank=True, null=True)
    checklist_guardrails = models.CharField(max_length=5, blank=True, null=True)
    checklist_guardrails_comment = models.TextField(blank=True, null=True)
    checklist_platforms = models.CharField(max_length=5, blank=True, null=True)
    checklist_platforms_comment = models.TextField(blank=True, null=True)
    checklist_begins = models.CharField(max_length=5, blank=True, null=True)
    checklist_begins_comment = models.TextField(blank=True, null=True)
    checklist_slipping = models.CharField(max_length=5, blank=True, null=True)
    checklist_slipping_comment = models.TextField(blank=True, null=True)
    checklist_overhead = models.CharField(max_length=5, blank=True, null=True)
    checklist_overhead_comment = models.TextField(blank=True, null=True)
    checklist_exceeds = models.CharField(max_length=5, blank=True, null=True)
    checklist_exceeds_comment = models.TextField(blank=True, null=True)
    checklist_tagged = models.CharField(max_length=5, blank=True, null=True)
    checklist_tagged_comment = models.TextField(blank=True, null=True)
    checklist_secure = models.CharField(max_length=5, blank=True, null=True)
    checklist_secure_comment = models.TextField(blank=True, null=True)
    checklist_rung = models.CharField(max_length=5, blank=True, null=True)
    checklist_rung_comment = models.TextField(blank=True, null=True)
    checklist_attachable = models.CharField(max_length=5, blank=True, null=True)
    checklist_attachable_comment = models.TextField(blank=True, null=True)
    checklist_ladders = models.CharField(max_length=5, blank=True, null=True)
    checklist_ladders_comment = models.TextField(blank=True, null=True)
    checklist_Built = models.CharField(max_length=5, blank=True, null=True)
    checklist_Built_comment = models.TextField(blank=True, null=True)
    checklist_vertically = models.CharField(max_length=5, blank=True, null=True)
    checklist_vertically_comment = models.TextField(blank=True, null=True)
    checklist_perforation = models.CharField(max_length=5, blank=True, null=True)
    checklist_perforation_comment = models.TextField(blank=True, null=True)
    checklist_restrained = models.CharField(max_length=5, blank=True, null=True)
    checklist_restrained_comment = models.TextField(blank=True, null=True)
    checklist_intervals = models.CharField(max_length=5, blank=True, null=True)
    checklist_intervals_comment = models.TextField(blank=True, null=True)
    checklist_firmly = models.CharField(max_length=5, blank=True, null=True)
    checklist_firmly_comment = models.TextField(blank=True, null=True)
    checklist_overextended = models.CharField(max_length=5, blank=True, null=True)
    checklist_overextended_comment = models.TextField(blank=True, null=True)
    checklist_settling = models.CharField(max_length=5, blank=True, null=True)
    checklist_settling_comment = models.TextField(blank=True, null=True)
    checklist_bricks = models.CharField(max_length=5, blank=True, null=True)
    checklist_bricks_comment = models.TextField(blank=True, null=True)
    date = models.TextField(blank=True, null=True)
    location = models.TextField(blank=True, null=True)
    insp_name = models.TextField(blank=True, null=True)
    insp_sign = models.TextField(blank=True, null=True)
    scaff_num = models.TextField(blank=True, null=True)
    inspection = models.ForeignKey(to="Inspections", on_delete=models.CASCADE)

    class Meta:
        db_table = "insp_ScaffoldInspection"

    def __str__(self):
        return self.plants_name


class ShopOffice(models.Model):
    id = models.AutoField(primary_key=True)
    plants_name = models.TextField(blank=True, null=True)
    date = models.TextField(blank=True, null=True)
    general_satis = models.TextField(blank=True, null=True)
    general_need_impro = models.TextField(blank=True, null=True)
    general_comment = models.TextField(blank=True, null=True)
    storage_satis = models.TextField(blank=True, null=True)
    storage_need_impro = models.TextField(blank=True, null=True)
    storage_comment = models.TextField(blank=True, null=True)
    lighting_satis = models.TextField(blank=True, null=True)
    lighting_need_impro = models.TextField(blank=True, null=True)
    lighting_comment = models.TextField(blank=True, null=True)
    window_satis = models.TextField(blank=True, null=True)
    window_need_impro = models.TextField(blank=True, null=True)
    window_comment = models.TextField(blank=True, null=True)
    firstaid_satis = models.TextField(blank=True, null=True)
    firstaid_need_impro = models.TextField(blank=True, null=True)
    firstaid_comment = models.TextField(blank=True, null=True)
    yard_gen_satis = models.TextField(blank=True, null=True)
    yard_gen_need_impro = models.TextField(blank=True, null=True)
    yard_gen_comment = models.TextField(blank=True, null=True)
    yard_light_satis = models.TextField(blank=True, null=True)
    yard_light_need_impro = models.TextField(blank=True, null=True)
    yard_light_comment = models.TextField(blank=True, null=True)
    yard_gates_satis = models.TextField(blank=True, null=True)
    yard_gates_need_impro = models.TextField(blank=True, null=True)
    yard_gates_comment = models.TextField(blank=True, null=True)
    shop_gen_satis = models.TextField(blank=True, null=True)
    shop_gen_need_impro = models.TextField(blank=True, null=True)
    shop_gen_comment = models.TextField(blank=True, null=True)
    shop_exit_satis = models.TextField(blank=True, null=True)
    shop_exit_need_impro = models.TextField(blank=True, null=True)
    shop_exit_comment = models.TextField(blank=True, null=True)
    shop_power_satis = models.TextField(blank=True, null=True)
    shop_power_need_impro = models.TextField(blank=True, null=True)
    shop_power_comment = models.TextField(blank=True, null=True)
    shop_chem_satis = models.TextField(blank=True, null=True)
    shop_chem_need_impro = models.TextField(blank=True, null=True)
    shop_chem_comment = models.TextField(blank=True, null=True)
    shop_gas_satis = models.TextField(blank=True, null=True)
    shop_gas_need_impro = models.TextField(blank=True, null=True)
    shop_gas_comment = models.TextField(blank=True, null=True)
    shop_aid_satis = models.TextField(blank=True, null=True)
    shop_aid_need_impro = models.TextField(blank=True, null=True)
    shop_aid_comment = models.TextField(blank=True, null=True)
    shop_machine_satis = models.TextField(blank=True, null=True)
    shop_machine_need_impro = models.TextField(blank=True, null=True)
    shop_machine_comment = models.TextField(blank=True, null=True)
    des_comment = models.TextField(blank=True, null=True)
    insp_by = models.TextField(blank=True, null=True)
    sign = models.TextField(blank=True, null=True)
    inspection = models.ForeignKey(to="Inspections", on_delete=models.CASCADE)

    class Meta:
        db_table = "insp_ShopOffice"

    def __str__(self):
        return self.plants_name


class SkidSteer(models.Model):
    id = models.AutoField(primary_key=True)
    plants_name = models.CharField(max_length=50, blank=True)
    month = models.CharField(max_length=50, blank=True)
    oil = models.TextField(blank=True)
    cooling = models.TextField(blank=True)
    hydraulic = models.TextField(blank=True)
    lift = models.TextField(blank=True)
    tire = models.TextField(blank=True)
    broken = models.TextField(blank=True)
    fuel = models.TextField(blank=True)
    decals = models.TextField(blank=True)
    brakes = models.TextField(blank=True)
    seat_bar = models.TextField(blank=True)
    seat_belt = models.TextField(blank=True)
    seat_backup = models.TextField(blank=True)
    head = models.TextField(blank=True)
    guards = models.TextField(blank=True)
    inspection = models.ForeignKey(to="Inspections", on_delete=models.CASCADE)

    class Meta:
        db_table = "insp_SkidSteer"

    def __str__(self):
        return self.plants_name


class SpotInspection(models.Model):
    id = models.AutoField(primary_key=True)
    plants_name = models.TextField(blank=True, null=True)
    date = models.TextField(blank=True, null=True)
    eva_perform_by = models.TextField(blank=True, null=True)
    per_present1 = models.TextField(blank=True, null=True)
    per_present2 = models.TextField(blank=True, null=True)
    per_present3 = models.TextField(blank=True, null=True)
    per_present4 = models.TextField(blank=True, null=True)
    per_present5 = models.TextField(blank=True, null=True)
    per_present6 = models.TextField(blank=True, null=True)
    per_present7 = models.TextField(blank=True, null=True)
    per_present8 = models.TextField(blank=True, null=True)
    per_present9 = models.TextField(blank=True, null=True)
    per_present10 = models.TextField(blank=True, null=True)
    grooming_satis = models.TextField(blank=True, null=True)
    grooming_need_impr = models.TextField(blank=True, null=True)
    grooming_comment = models.TextField(blank=True, null=True)
    worn_satis = models.TextField(blank=True, null=True)
    worn_need_impr = models.TextField(blank=True, null=True)
    worn_comment = models.TextField(blank=True, null=True)
    safety_satis = models.TextField(blank=True, null=True)
    safety_need_impr = models.TextField(blank=True, null=True)
    safety_comment = models.TextField(blank=True, null=True)
    vehicle_satis = models.TextField(blank=True, null=True)
    vehicle_need_impr = models.TextField(blank=True, null=True)
    vehicle_comment = models.TextField(blank=True, null=True)
    doc_satis = models.TextField(blank=True, null=True)
    doc_need_impr = models.TextField(blank=True, null=True)
    doc_comment = models.TextField(blank=True, null=True)
    emer_satis = models.TextField(blank=True, null=True)
    emer_need_impr = models.TextField(blank=True, null=True)
    emer_comment = models.TextField(blank=True, null=True)
    equip_satis = models.TextField(blank=True, null=True)
    equip_need_impr = models.TextField(blank=True, null=True)
    equip_comment = models.TextField(blank=True, null=True)
    appr_satis = models.TextField(blank=True, null=True)
    appr_need_impr = models.TextField(blank=True, null=True)
    appr_comment = models.TextField(blank=True, null=True)
    hazard_satis = models.TextField(blank=True, null=True)
    hazard_need_impr = models.TextField(blank=True, null=True)
    hazard_comment = models.TextField(blank=True, null=True)
    insp_satis = models.TextField(blank=True, null=True)
    insp_need_impr = models.TextField(blank=True, null=True)
    insp_comment = models.TextField(blank=True, null=True)
    des_comment = models.TextField(blank=True, null=True)
    insp_by = models.TextField(blank=True, null=True)
    insp_by2 = models.TextField(blank=True, null=True)
    inspection = models.ForeignKey(to="Inspections", on_delete=models.CASCADE)

    class Meta:
        db_table = "insp_SpotInspection"

    def __str__(self):
        return self.plants_name


class SubcontractorAcknowledgment(models.Model):
    id = models.AutoField(primary_key=True)
    plants_name = models.CharField(max_length=50, blank=True)
    name = models.CharField(max_length=50, blank=True)
    subcont_sign = models.CharField(max_length=50, blank=True)
    manager_name = models.CharField(max_length=50, blank=True)
    management_sign = models.CharField(max_length=50, blank=True)
    inspection = models.ForeignKey(to="Inspections", on_delete=models.CASCADE)

    class Meta:
        db_table = "insp_SubcontractorAcknowledgment"

    def __str__(self):
        return self.plants_name


class SubcontractorOrientation(models.Model):
    id = models.AutoField(primary_key=True)
    plants_name = models.TextField(blank=True, null=True)
    date = models.TextField(blank=True, null=True)
    subcont_name = models.TextField(blank=True, null=True)
    pre_exp = models.TextField(blank=True, null=True)
    company_done = models.TextField(blank=True, null=True)
    company_na = models.TextField(blank=True, null=True)
    meeting_done = models.TextField(blank=True, null=True)
    meeting_na = models.TextField(blank=True, null=True)
    subcont_done = models.TextField(blank=True, null=True)
    subcont_na = models.TextField(blank=True, null=True)
    emer_done = models.TextField(blank=True, null=True)
    emer_na = models.TextField(blank=True, null=True)
    pract_done = models.TextField(blank=True, null=True)
    pract_na = models.TextField(blank=True, null=True)
    res_plan_done = models.TextField(blank=True, null=True)
    res_plan_na = models.TextField(blank=True, null=True)
    housekeeping_done = models.TextField(blank=True, null=True)
    housekeeping_na = models.TextField(blank=True, null=True)
    insp_done = models.TextField(blank=True, null=True)
    insp_na = models.TextField(blank=True, null=True)
    working_done = models.TextField(blank=True, null=True)
    working_na = models.TextField(blank=True, null=True)
    pertrain_done = models.TextField(blank=True, null=True)
    pertrain_na = models.TextField(blank=True, null=True)
    right_done = models.TextField(blank=True, null=True)
    right_na = models.TextField(blank=True, null=True)
    disc_done = models.TextField(blank=True, null=True)
    disc_na = models.TextField(blank=True, null=True)
    gen_done = models.TextField(blank=True, null=True)
    gen_na = models.TextField(blank=True, null=True)
    wcb_done = models.TextField(blank=True, null=True)
    wcb_na = models.TextField(blank=True, null=True)
    per_pro_done = models.TextField(blank=True, null=True)
    per_pro_na = models.TextField(blank=True, null=True)
    copied_done = models.TextField(blank=True, null=True)
    copied_na = models.TextField(blank=True, null=True)
    invest_done = models.TextField(blank=True, null=True)
    invest_na = models.TextField(blank=True, null=True)
    proof_done = models.TextField(blank=True, null=True)
    proof_na = models.TextField(blank=True, null=True)
    drug_done = models.TextField(blank=True, null=True)
    drug_na = models.TextField(blank=True, null=True)
    wcb_acc_done = models.TextField(blank=True, null=True)
    wcb_acc_na = models.TextField(blank=True, null=True)
    awarness_done = models.TextField(blank=True, null=True)
    awarness_na = models.TextField(blank=True, null=True)
    _done = models.TextField(blank=True, null=True)
    _na = models.TextField(blank=True, null=True)
    subcont_sign = models.TextField(blank=True, null=True)
    trainer_sign = models.TextField(blank=True, null=True)
    des_job_training = models.TextField(blank=True, null=True)
    dur_training = models.TextField(blank=True, null=True)
    trainer_sign2 = models.TextField(blank=True, null=True)
    des_comment = models.TextField(blank=True, null=True)
    date_compl = models.TextField(blank=True, null=True)
    trainer_sign3 = models.TextField(blank=True, null=True)
    inspection = models.ForeignKey(to="Inspections", on_delete=models.CASCADE)

    class Meta:
        db_table = "insp_SubcontractorOrientation"

    def __str__(self):
        return self.plants_name


class TruckDeficiency(models.Model):
    id = models.AutoField(primary_key=True)
    plants_name = models.CharField(max_length=50, blank=True)
    unit = models.CharField(max_length=50, blank=True)
    date = models.CharField(max_length=50, blank=True)
    des_defici = models.TextField(blank=True)
    tag_out_req = models.CharField(max_length=5, blank=True)
    tag_out_comp = models.CharField(max_length=5, blank=True)
    des_follow = models.TextField(blank=True)
    print = models.CharField(max_length=50, blank=True)
    sign = models.CharField(max_length=50, blank=True)
    inspection = models.ForeignKey(to="Inspections", on_delete=models.CASCADE)

    class Meta:
        db_table = "insp_TruckDeficiency"

    def __str__(self):
        return self.plants_name


class UserFitness(models.Model):
    id = models.AutoField(primary_key=True)
    plants_name = models.CharField(max_length=50, blank=True)
    last_name = models.CharField(max_length=50, blank=True)
    first_name = models.CharField(max_length=50, blank=True)
    date = models.CharField(max_length=50, blank=True)
    employee_no = models.CharField(max_length=50, blank=True)
    job_title = models.CharField(max_length=50, blank=True)
    area = models.CharField(max_length=50, blank=True)
    phone_no = models.CharField(max_length=50, blank=True)
    first_name_two = models.CharField(max_length=50, blank=True)
    supervisors_name = models.CharField(max_length=50, blank=True)
    activity = models.CharField(max_length=50, blank=True)
    activity_two = models.CharField(max_length=50, blank=True)
    activity_three = models.CharField(max_length=50, blank=True)
    activity_four = models.CharField(max_length=50, blank=True)
    frequency_of_respirator = models.CharField(max_length=50, blank=True)
    exertion_level = models.CharField(max_length=50, blank=True)
    duration_of_respirator = models.CharField(max_length=50, blank=True)
    temperature_during_respirator = models.CharField(max_length=50, blank=True)
    atmospheric_pressure = models.CharField(max_length=50, blank=True)
    special_work = models.CharField(max_length=50, blank=True)
    mask_type = models.CharField(max_length=50, blank=True)
    mask_make = models.CharField(max_length=50, blank=True)
    mask_model = models.CharField(max_length=50, blank=True)
    mask_test = models.CharField(max_length=50, blank=True)
    other_equip = models.CharField(max_length=50, blank=True)
    other = models.CharField(max_length=50, blank=True)
    average = models.CharField(max_length=50, blank=True)
    inspection = models.ForeignKey(to="Inspections", on_delete=models.CASCADE)

    class Meta:
        db_table = "insp_UserFitness"

    def __str__(self):
        return self.plants_name


class VehicleInspection(models.Model):
    id = models.AutoField(primary_key=True)
    plants_name = models.TextField(blank=True, null=True)
    date = models.TextField(blank=True, null=True)
    vehicle = models.TextField(blank=True, null=True)
    odometer_reading = models.TextField(blank=True, null=True)
    ext_satisfactory = models.TextField(blank=True, null=True)
    ext_improvement = models.TextField(blank=True, null=True)
    ext_comments = models.TextField(blank=True, null=True)
    int_satisfactory = models.TextField(blank=True, null=True)
    int_comments = models.TextField(blank=True, null=True)
    tires_satisfactory = models.TextField(blank=True, null=True)
    tires_improvement = models.TextField(blank=True, null=True)
    tires_comments = models.TextField(blank=True, null=True)
    wind_satisfactory = models.TextField(blank=True, null=True)
    wind_improvement = models.TextField(blank=True, null=True)
    wind_comments = models.TextField(blank=True, null=True)
    wind_siper_satisfactory = models.TextField(blank=True, null=True)
    wind_siper_improvement = models.TextField(blank=True, null=True)
    wind_siper_comments = models.TextField(blank=True, null=True)
    lights_satisfactory = models.TextField(blank=True, null=True)
    lights_improvement = models.TextField(blank=True, null=True)
    lights_comments = models.TextField(blank=True, null=True)
    horn_satisfactory = models.TextField(blank=True, null=True)
    horn_improvement = models.TextField(blank=True, null=True)
    horn_comments = models.TextField(blank=True, null=True)
    fuel_satisfactory = models.TextField(blank=True, null=True)
    fuel_improvement = models.TextField(blank=True, null=True)
    fuel_comments = models.TextField(blank=True, null=True)
    oil_satisfactory = models.TextField(blank=True, null=True)
    oil_improvement = models.TextField(blank=True, null=True)
    oil_comments = models.TextField(blank=True, null=True)
    spare_satisfactory = models.TextField(blank=True, null=True)
    spare_improvement = models.TextField(blank=True, null=True)
    spare_comments = models.TextField(blank=True, null=True)
    booster_satisfactory = models.TextField(blank=True, null=True)
    booster_improvement = models.TextField(blank=True, null=True)
    booster_comments = models.TextField(blank=True, null=True)
    aid_satisfactory = models.TextField(blank=True, null=True)
    aid_improvement = models.TextField(blank=True, null=True)
    aid_comments = models.TextField(blank=True, null=True)
    doc_satisfactory = models.TextField(blank=True, null=True)
    doc_improvement = models.TextField(blank=True, null=True)
    doc_comments = models.TextField(blank=True, null=True)
    des_comment = models.TextField(blank=True, null=True)
    print = models.TextField(blank=True, null=True)
    sign = models.TextField(blank=True, null=True)
    inspection = models.ForeignKey(to="Inspections", on_delete=models.CASCADE)

    class Meta:
        db_table = "insp_VehicleInspection"

    def __str__(self):
        return self.plants_name


class VehicleInspectionLog(models.Model):
    id = models.AutoField(primary_key=True)
    plants_name = models.TextField(blank=True, null=True)
    unit = models.TextField(blank=True, null=True)
    des_vehicle = models.TextField(blank=True, null=True)
    air_filter = models.TextField(blank=True, null=True)
    oil_filter = models.TextField(blank=True, null=True)
    oil = models.TextField(blank=True, null=True)
    vehicle_one = models.TextField(blank=True, null=True)
    date_one = models.TextField(blank=True, null=True)
    work_one = models.TextField(blank=True, null=True)
    vehicle_two = models.TextField(blank=True, null=True)
    date_two = models.TextField(blank=True, null=True)
    work_two = models.TextField(blank=True, null=True)
    vehicle_three = models.TextField(blank=True, null=True)
    date_three = models.TextField(blank=True, null=True)
    work_three = models.TextField(blank=True, null=True)
    vehicle_four = models.TextField(blank=True, null=True)
    date_four = models.TextField(blank=True, null=True)
    work_four = models.TextField(blank=True, null=True)
    vehicle_five = models.TextField(blank=True, null=True)
    date_five = models.TextField(blank=True, null=True)
    work_five = models.TextField(blank=True, null=True)
    vehicle_six = models.TextField(blank=True, null=True)
    date_six = models.TextField(blank=True, null=True)
    work_six = models.TextField(blank=True, null=True)
    vehicle_seven = models.TextField(blank=True, null=True)
    date_seven = models.TextField(blank=True, null=True)
    work_seven = models.TextField(blank=True, null=True)
    vehicle_eight = models.TextField(blank=True, null=True)
    date_eight = models.TextField(blank=True, null=True)
    work_eight = models.TextField(blank=True, null=True)
    vehicle_nine = models.TextField(blank=True, null=True)
    date_nine = models.TextField(blank=True, null=True)
    work_nine = models.TextField(blank=True, null=True)
    vehicle_ten = models.TextField(blank=True, null=True)
    date_ten = models.TextField(blank=True, null=True)
    work_ten = models.TextField(blank=True, null=True)
    vehicle_eleven = models.TextField(blank=True, null=True)
    date_eleven = models.TextField(blank=True, null=True)
    work_eleven = models.TextField(blank=True, null=True)
    vehicle_twelve = models.TextField(blank=True, null=True)
    date_twelve = models.TextField(blank=True, null=True)
    work_twelve = models.TextField(blank=True, null=True)
    vehicle_thirteen = models.TextField(blank=True, null=True)
    date_thirteen = models.TextField(blank=True, null=True)
    work_thirteen = models.TextField(blank=True, null=True)
    vehicle_fourteen = models.TextField(blank=True, null=True)
    date_fourteen = models.TextField(blank=True, null=True)
    work_fourteen = models.TextField(blank=True, null=True)
    inspection = models.ForeignKey(to="Inspections", on_delete=models.CASCADE)

    class Meta:
        db_table = "insp_VehicleInspectionLog"

    def __str__(self):
        return self.plants_name


class VendorTruck(models.Model):
    id = models.AutoField(primary_key=True)
    plants_name = models.TextField(blank=True, null=True)
    date = models.TextField(blank=True, null=True)
    contractor = models.TextField(blank=True, null=True)
    corr = models.TextField(blank=True, null=True)
    emer_phone = models.TextField(blank=True, null=True)
    tra_type = models.TextField(blank=True, null=True)
    trailer_type = models.TextField(blank=True, null=True)
    low_boy = models.TextField(blank=True, null=True)
    type_equip = models.TextField(blank=True, null=True)
    type_equipment = models.TextField(blank=True, null=True)
    other_type = models.TextField(blank=True, null=True)
    plan = models.TextField(blank=True, null=True)
    rigging_plan = models.TextField(blank=True, null=True)
    attach_plan = models.TextField(blank=True, null=True)
    load_loaction = models.TextField(blank=True, null=True)
    hazards_wet = models.CharField(max_length=5, blank=True, null=True)
    hazards_dirt = models.CharField(max_length=5, blank=True, null=True)
    hazards_binders = models.CharField(max_length=5, blank=True, null=True)
    hazards_straps = models.CharField(max_length=5, blank=True, null=True)
    hazards_sharp = models.CharField(max_length=5, blank=True, null=True)
    hazards_transit = models.CharField(max_length=5, blank=True, null=True)
    hazards_weather = models.CharField(max_length=5, blank=True, null=True)
    hazards_muddy = models.CharField(max_length=5, blank=True, null=True)
    hazards_lines = models.CharField(max_length=5, blank=True, null=True)
    hazards_nearby = models.CharField(max_length=5, blank=True, null=True)
    hazards_other = models.CharField(max_length=5, blank=True, null=True)
    des_hazards = models.TextField(blank=True, null=True)
    hazards_shields = models.CharField(max_length=5, blank=True, null=True)
    hazards_rigging = models.CharField(max_length=5, blank=True, null=True)
    hazards_striping = models.CharField(max_length=5, blank=True, null=True)
    sign = models.TextField(blank=True, null=True)
    company = models.TextField(blank=True, null=True)
    inspection = models.ForeignKey(to="Inspections", on_delete=models.CASCADE)

    class Meta:
        db_table = "insp_VendorTruck"

    def __str__(self):
        return self.plants_name